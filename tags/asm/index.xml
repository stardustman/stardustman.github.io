<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>asm on stardustman</title><link>http://stardustman.github.io/tags/asm/</link><description>Recent content in asm on stardustman</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 08 Jun 2020 08:09:12 +0800</lastBuildDate><atom:link href="http://stardustman.github.io/tags/asm/index.xml" rel="self" type="application/rss+xml"/><item><title>asm-how-computer-startup</title><link>http://stardustman.github.io/post/asm-how-computer-startup/</link><pubDate>Mon, 08 Jun 2020 08:09:12 +0800</pubDate><guid>http://stardustman.github.io/post/asm-how-computer-startup/</guid><description>x86 架构计算机是如何启动的？ 16-bit Processors and Segmentation (1978) The IA-32 architecture family was preceded by 16-bit processors, the 8086 and 8088. The 8086 has 16-bit registers and a 16-bit external data bus, with 20-bit addressing giving a 1-MByte address space. The 8088 is similar to the 8086 except it has an 8-bit external data bus. The 8086/8088 introduced segmentation to</description></item><item><title>asm-how-recursion-function-execute</title><link>http://stardustman.github.io/post/asm-how-recursion-function-execute/</link><pubDate>Sat, 06 Jul 2019 16:35:51 +0800</pubDate><guid>http://stardustman.github.io/post/asm-how-recursion-function-execute/</guid><description>斐波那契数列 问题描述 第一个月初有一对刚诞生的兔子 第二个月之后(第三个月)它们可以生育 每月每对可生育的兔子会诞生下一对新兔子 兔子永不死 问第 n 月</description></item><item><title>asm-clang-concepts</title><link>http://stardustman.github.io/post/asm-clang-concepts/</link><pubDate>Tue, 25 Jun 2019 16:57:59 +0800</pubDate><guid>http://stardustman.github.io/post/asm-clang-concepts/</guid><description>C 语言里的概念在 X86-64 汇编层面的分析. 汇编风格使用 AT&amp;amp;T 风格. 编译器是 gcc-x86-64-9.1 指针 A pointer is a programming language object that stores the memory address of another value located in computer memory. A pointer references a location in memory, and obtaining the value stored at that location is known</description></item><item><title>asm-how-x86-64-arguments-pass</title><link>http://stardustman.github.io/post/asm-how-x86-64-arguments-pass/</link><pubDate>Mon, 24 Jun 2019 09:52:27 +0800</pubDate><guid>http://stardustman.github.io/post/asm-how-x86-64-arguments-pass/</guid><description>x86-64 下函数参数传递, 汇编层面分析 To pass parameters to the subroutine, we put up to six of them into registers (in order: rdi, rsi, rdx, rcx, r8, r9). If there are more than six parameters to the subroutine, then push the rest onto the stack in reverse order (i.e. last parameter first) – since the stack grows down, the first</description></item><item><title>asm-how-x86-function-execute</title><link>http://stardustman.github.io/post/asm-how-x86-function-execute/</link><pubDate>Tue, 28 May 2019 19:32:16 +0800</pubDate><guid>http://stardustman.github.io/post/asm-how-x86-function-execute/</guid><description>前一阵子去看 java 虚拟机原理, 忽然痛悟到虚拟机也是机器啊, 呵呵也就是个软件而已. 看到 java 方法调用太复杂. 字节码那一套又不太熟悉, 还不如直接去看 C 编</description></item></channel></rss>