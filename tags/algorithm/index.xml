<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on stardustman</title><link>http://stardustman.github.io/tags/algorithm/</link><description>Recent content in algorithm on stardustman</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Apr 2020 20:02:16 +0800</lastBuildDate><atom:link href="http://stardustman.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>algorithm-quick-sort</title><link>http://stardustman.github.io/2020/04/14/algorithm-quick-sort/</link><pubDate>Tue, 14 Apr 2020 20:02:16 +0800</pubDate><guid>http://stardustman.github.io/2020/04/14/algorithm-quick-sort/</guid><description>quick sort C 代码 #include &amp;lt;stdio.h&amp;gt; int partition(int* array, int startIndex, int endIndex){ int left = startIndex; int right = endIndex; int pivot = array[startIndex]; int temp = 0; // 第一个 while 循环，其实就是从两个方向遍历一次数组，根据 pivot 进行分割。 while (left != right) { // 第二</description></item><item><title>algorithm-merge-sort</title><link>http://stardustman.github.io/2020/04/10/algorithm-merge-sort/</link><pubDate>Fri, 10 Apr 2020 20:07:39 +0800</pubDate><guid>http://stardustman.github.io/2020/04/10/algorithm-merge-sort/</guid><description>merge sort merge sort C code #include &amp;lt;stdio.h&amp;gt; void merge(int* array, int start, int mid, int end){ // start = 0 // mid = 3 // end = 7 int tempArrayLength = end - start + 1; // 8 int tempArray[tempArrayLength]; // tempArray[8] int p1 = start; // 0 int p2 = mid + 1; // 4 int p = 0; // 比较两个小集合，</description></item></channel></rss>