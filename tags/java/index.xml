<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on stardustman</title><link>http://stardustman.github.io/tags/java/</link><description>Recent content in java on stardustman</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 05 Apr 2023 10:35:32 +0800</lastBuildDate><atom:link href="http://stardustman.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Asm How Java Byte Code Execute</title><link>http://stardustman.github.io/2023/04/05/asm-how-java-byte-code-execute/</link><pubDate>Wed, 05 Apr 2023 10:35:32 +0800</pubDate><guid>http://stardustman.github.io/2023/04/05/asm-how-java-byte-code-execute/</guid><description>jvm jvm 是一个栈式(stack-based)虚拟计算机。啥意思，就是大多数的 opcode 的操作数在 operand stack 上，执行的结果也放在 oprand stack 上。 有的 opcode 的操作数在 local variable ta</description></item><item><title>asm-java-jit</title><link>http://stardustman.github.io/2021/07/18/asm-java-jit/</link><pubDate>Sun, 18 Jul 2021 10:43:46 +0800</pubDate><guid>http://stardustman.github.io/2021/07/18/asm-java-jit/</guid><description>前言 无论多么花里胡哨的功能，最终落地到一台计算机上，都是二进制代码。虽然 java 代码跑在 jvm 平台之上，但是 jvm 只是负责执行 java 自定义的一套 bytecode 的工具，只要</description></item></channel></rss>