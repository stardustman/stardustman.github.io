<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stardustman</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stardustman.github.io/"/>
  <updated>2019-10-24T08:36:34.954Z</updated>
  <id>http://stardustman.github.io/</id>
  
  <author>
    <name>stardustman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>x86-64-architecture</title>
    <link href="http://stardustman.github.io/2019/10/16/x86-64-architecture/"/>
    <id>http://stardustman.github.io/2019/10/16/x86-64-architecture/</id>
    <published>2019-10-16T05:59:24.000Z</published>
    <updated>2019-10-24T08:36:34.954Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统其实很大一部分面向 <code>CPU</code> 来编程的。一些 <code>OS</code> 的概念直接来源于 <code>CPU</code> 的术语，或者和 <code>CPU</code> 关联性非常大。要想彻底理解 <code>OS</code> ，无法绕过 <code>CPU</code>。因为 Intel 的 <code>X86</code>(Intel 80386 之后的一系列 CPU 称之为 X86 架构) 是业界的标准。掌握这个架构对于理解 <code>OS</code> 是非常必要的。因为 <code>X86</code> 系列的 <code>CPU</code> 向后兼容，所以本文使用 Intel 8086(16 bit) 和 Intel 80386(32 bit) 来试图理解 <code>X86</code> 架构。</p></blockquote><h2 id="Intel-8086"><a href="#Intel-8086" class="headerlink" title="Intel 8086"></a>Intel 8086</h2><h3 id="16-bit-processor"><a href="#16-bit-processor" class="headerlink" title="16 bit processor"></a>16 bit processor</h3><blockquote><p><code>16-bit</code> is a computer hardware device or software program capable of transferring 16 bits of data at a time. 一次传输 16 bits 的数据<br>For example, early computer processors (e.g., 8088 and 80286) were 16-bit processors, meaning they were capable of working with 16-bit binary numbers (decimal number up to 65,535). Anything larger and the computer would need to break the number into smaller pieces.</p></blockquote><h3 id="1M-的寻址空间带来的问题与解决方法"><a href="#1M-的寻址空间带来的问题与解决方法" class="headerlink" title="1M 的寻址空间带来的问题与解决方法"></a>1M 的寻址空间带来的问题与解决方法</h3><h4 id="Intel-8086-地址引脚"><a href="#Intel-8086-地址引脚" class="headerlink" title="Intel 8086 地址引脚"></a>Intel 8086 地址引脚</h4><img src="/2019/10/16/x86-64-architecture/intel8086_address.png" title="Intel 8086 寻址空间"> <blockquote><p>上图的 AD<sub>0</sub> ~ AD<sub>15</sub> 是复用(Multiplex)引脚<br>A<sub>16</sub> ~ A<sub>19</sub> 也是复用引脚</p></blockquote><ul><li>ALE(Address Latch Enable) = 1 是作为地址线 A<sub>0</sub>~A<sub>15</sub>(寻址) 再加上A<sub>16</sub> ~ A<sub>19</sub>.</li><li>ALE(Address Latch Enable) = 0 是作为数据线 D<sub>0</sub>~D<sub>15</sub>(传输 16 bit 数据)</li></ul><h4 id="物理地址生成"><a href="#物理地址生成" class="headerlink" title="物理地址生成"></a>物理地址生成</h4><blockquote><p>20 bit 来表示一个内存地址. 但是 Intel 8086 是一个 <code>16 bit</code> 的处理器(其实就是一次只能传输 16 bit 的数据). 怎样来表示 <code>20 bit</code> 的内存地址呢? 比如一个内存地址是: <code>0x18AC9</code>, 该怎样表示呢? 其实道理很简单, 既然没法一次传输 20 bit, 那就分两次好了. 最后用两个 <code>16 bit</code> 的数据来合成 <code>0x18AC9</code> 这个地址. 很显然要有生成 <code>0x18AC9</code> 这个地址的策略. 在 Intel 8086 中, 将 <code>0x18AC9</code> 拆分为 <code>0x1234</code>(segment address) 和 <code>0x6789</code>(offset address) 这两个 <code>16 bit</code> 的地址, 这就是所谓的逻辑地址(logical address). 怎样生成 <code>0x18AC9</code> 这个真实的物理地址呢? 也很简单使用一个 <code>20 bit</code> 的 <code>adder</code>(加法器). 0x18AC9 = 0x1234 * 16 + 0x6789</p></blockquote><img src="/2019/10/16/x86-64-architecture/intel8086_real_address_mode_translation.png" title="Intel 8086 Real Address Mode Translation"> <h4 id="Real-Address-Mode"><a href="#Real-Address-Mode" class="headerlink" title="Real Address Mode"></a>Real Address Mode</h4><blockquote><p>物理地址由两部分组成: segment address 和 offset address. 这两个地址不能直接使用, 是用来合成真正的物理地址的. 这两个地址称之为 <code>逻辑地址</code>. 16 * segment address + offset address 合成的地址称之为 <code>物理地址</code>, 也叫 <code>线性地址</code>(也就是从 0 ~ 2^20 -1 地址空间). Intel 8086 这种得到物理地址的机制就叫做 <code>real address mode</code>. 也就是所谓的 <code>实模式</code>.PS: 多说一句, <code>实模式</code> 这个翻译有点坑, 翻译成 <code>实地址模式</code> 不就十分清楚了吗?</p></blockquote><h4 id="segmented-memory"><a href="#segmented-memory" class="headerlink" title="segmented memory"></a>segmented memory</h4><blockquote><p>physical address = 16 * segment address + offset address<br>offset address 是 16 bit, 决定了一个 segment 的范围是 64K. 将 1M 的寻址空间以 64K 为一个 segment 划分为多个 segment. 反过来说就是一个 segment 可以选择一个 64K 范围内的地址. 是的, <code>segment</code> 可以当作是一种 <code>selector</code>, 就像 <code>CSS</code> 里面的选择器.<br>那么这个 segment 存放在哪里呢? 放在专门的 <code>segment register</code> 里. </p></blockquote><h4 id="segment-registers"><a href="#segment-registers" class="headerlink" title="segment registers"></a>segment registers</h4><blockquote><p>Intel 8086 提供了 <code>Extra Segment</code>(ES), <code>Data Segment</code>(DS), <code>Stack Segment</code>(SS), <code>Code Segment</code>(CS) 这 4 个 段寄存器.</p></blockquote><h5 id="code-segment-CS-instruction-pointer-IP"><a href="#code-segment-CS-instruction-pointer-IP" class="headerlink" title="code segment(CS) + instruction pointer(IP)"></a>code segment(CS) + instruction pointer(IP)</h5><blockquote><p>code segment 存放 segment address, 这是个专门的代码段寄存器, 用来存放代码的地址.<br>instruction pointer 存放 offset address, 这个是专门的指令寄存器, 用来存放下一条指令的地址.<br>所以访问代码的 <code>物理地址 = 16 * CS + IP</code></p></blockquote><h5 id="stack-segment-SS-stack-pointer-SP"><a href="#stack-segment-SS-stack-pointer-SP" class="headerlink" title="stack segment(SS) + stack pointer(SP)"></a>stack segment(SS) + stack pointer(SP)</h5><blockquote><p>stack segment 存放 segment address, 这个是专门的栈帧段寄存器.<br>stack pointer 存放 offset address, 这个专门的记录栈帧的寄存器.<br>所以访问函数栈帧的 <code>物理地址 = 16 * SS + SP</code></p></blockquote><blockquote><p>注意: 如果令 SS = 0, 那么访问函数栈帧的 <code>物理地址 = SP</code>, 也就是只能访问 64K 的空间.<br>注意: real address mode 能够不受限制地访问 1M 的地址空间. 程序可以自由的访问 1M 的地址空间, 无法进行内存的保护, 这也是 <code>Intel 80386</code> 要解决的问题之一. </p></blockquote><p>#### </p><h3 id="general-purpose-register"><a href="#general-purpose-register" class="headerlink" title="general purpose register"></a>general purpose register</h3><h3 id="memory-mapping"><a href="#memory-mapping" class="headerlink" title="memory mapping"></a>memory mapping</h3><blockquote><p>已安装内存 8G(7.88G) 可用？？？原因在哪里呢？</p></blockquote><h2 id="Intel-80386"><a href="#Intel-80386" class="headerlink" title="Intel 80386"></a>Intel 80386</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://8086microprocessor4u.blogspot.com/2012/12/bus-interface-unit-biu.html" target="_blank" rel="noopener">bus interface unit</a></li><li><a href="http://8086microprocessor4u.blogspot.com/2015/04/the-execution-unit-eu.html" target="_blank" rel="noopener">execution unit</a></li><li><a href="https://www.tutorialspoint.com/microprocessor/microprocessor_8086_functional_units.htm" target="_blank" rel="noopener">8086 Functional Units</a></li><li><a href="https://www.csetutor.com/components-of-cpu-and-their-functions/" target="_blank" rel="noopener">components of cpu</a></li><li><a href="https://vdocuments.mx/8086-microprocessor-architecture-5584489b9c738.html" target="_blank" rel="noopener">8086-microprocessor-architecture</a></li><li><a href="https://www.academia.edu/40314276/8086_microprocessor20190911_87442_nxpkcz" target="_blank" rel="noopener">8086-microprocessor</a></li><li><a href="https://www.geeksforgeeks.org/memory-segmentation-8086-microprocessor/" target="_blank" rel="noopener">memory-segmentation-8086-microprocessor</a></li><li><a href="https://www.cs.usfca.edu/~cruse/cs630f06/" target="_blank" rel="noopener">Advanced Microcomputer Programming</a></li><li><a href="https://www.computerhope.com/jargon/num/16bit.htm" target="_blank" rel="noopener">16 bit processor mean?</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;操作系统其实很大一部分面向 &lt;code&gt;CPU&lt;/code&gt; 来编程的。一些 &lt;code&gt;OS&lt;/code&gt; 的概念直接来源于 &lt;code&gt;CPU&lt;/code&gt; 的术语，或者和 &lt;code&gt;CPU&lt;/code&gt; 关联性非常大。要想彻底理解 &lt;cod
      
    
    </summary>
    
    
    
      <category term="x86" scheme="http://stardustman.github.io/tags/x86/"/>
    
  </entry>
  
  <entry>
    <title>select_poll_epoll</title>
    <link href="http://stardustman.github.io/2019/09/19/select-poll-epoll/"/>
    <id>http://stardustman.github.io/2019/09/19/select-poll-epoll/</id>
    <published>2019-09-19T06:43:18.000Z</published>
    <updated>2019-10-20T10:54:11.247Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>弄清楚 I/O Multiplexing 和 Linux 中 select, poll, epoll 之间的关系.</p></blockquote><h2 id="multiplexer"><a href="#multiplexer" class="headerlink" title="multiplexer"></a>multiplexer</h2><blockquote><p><code>Multiplexer</code> is a combinational circuit that has maximum of 2^n data inputs, <code>n</code> <code>selection lines</code> and <code>single output line</code>. One of these data inputs will be connected to the output based on the values of selection lines.<br>Since there are <code>n</code> selection lines, there will be 2^n possible combinations of zeros and ones. So, each combination will select only one data input. Multiplexer is also called as Mux.<br>聚合多个输入, 通过 selection lines 来选择一个输出. </p></blockquote><h3 id="4x1-Multiplexer-分析"><a href="#4x1-Multiplexer-分析" class="headerlink" title="4x1 Multiplexer 分析"></a>4x1 Multiplexer 分析</h3><blockquote><p>聚合 I<sub>0</sub>, I<sub>1</sub>, I<sub>2</sub>, I<sub>3</sub> 这 4 个输入, 通过 S1 和 S0 来选择一个输出.</p></blockquote><h3 id="Block-diagram-of-4x1-Multiplexer"><a href="#Block-diagram-of-4x1-Multiplexer" class="headerlink" title="Block diagram of 4x1 Multiplexer"></a>Block diagram of 4x1 Multiplexer</h3><img src="/2019/09/19/select-poll-epoll/4x1_Multiplexer.png" title="4x1_Multiplexer"><h3 id="Y-output-输出值的分析"><a href="#Y-output-输出值的分析" class="headerlink" title="Y(output) 输出值的分析"></a>Y<sub>(output)</sub> 输出值的分析</h3><h4 id="S1-0-S0-0-时-Y-的值由-I0-决定"><a href="#S1-0-S0-0-时-Y-的值由-I0-决定" class="headerlink" title="S1 = 0, S0 = 0 时 Y 的值由 I0 决定"></a>S<sub>1</sub> = 0, S<sub>0</sub> = 0 时 Y 的值由 I<sub>0</sub> 决定</h4><img src="/2019/09/19/select-poll-epoll/multiplexers_S1_S0_I0.png" title="multiplexers_S1_S0_I0"><blockquote><p>S1 = 0, S0 = 0. 此时的 I1, I2, I3, 无论是 0 还是 1, 对应的 <code>and gate</code> 输出都是 0, 对最终输出 <code>Y</code> 没有影响. 此时 I0 的输入决定 <code>Y</code> 的值. 也就是 <code>Y</code> = I0.</p></blockquote><h4 id="S1-0-S0-1-时-Y-的值由-I1-决定"><a href="#S1-0-S0-1-时-Y-的值由-I1-决定" class="headerlink" title="S1 = 0, S0 = 1 时 Y 的值由 I1 决定"></a>S<sub>1</sub> = 0, S<sub>0</sub> = 1 时 Y 的值由 I<sub>1</sub> 决定</h4><img src="/2019/09/19/select-poll-epoll/multiplexers_S1_S0_I1.png" title="multiplexers_S1_S0_I1"><blockquote><p>S1 = 0, S0 = 1. 此时的 I0, I2, I3, 无论是 0 还是 1, 对应的 <code>and gate</code> 输出都是 0, 对最终输出 <code>Y</code> 没有影响. 此时 I1 的输入决定 <code>Y</code> 的值. 也就是 <code>Y</code> = I1.</p></blockquote><h4 id="S1-1-S0-0-时-Y-的值由-I2-决定"><a href="#S1-1-S0-0-时-Y-的值由-I2-决定" class="headerlink" title="S1 = 1, S0 = 0 时 Y 的值由 I2 决定"></a>S<sub>1</sub> = 1, S<sub>0</sub> = 0 时 Y 的值由 I<sub>2</sub> 决定</h4><img src="/2019/09/19/select-poll-epoll/multiplexers_S1_S0_I2.png" title="multiplexers_S1_S0_I2"><blockquote><p>S1 = 1, S0 = 0. 此时的 I0, I1, I3, 无论是 0 还是 1, 对应的 <code>and gate</code> 输出都是 0, 对最终输出 <code>Y</code> 没有影响. 此时 I2 的输入决定 <code>Y</code> 的值. 也就是 <code>Y</code> = I2.</p></blockquote><h4 id="S1-1-S1-0-时-Y-的值由-I3-决定"><a href="#S1-1-S1-0-时-Y-的值由-I3-决定" class="headerlink" title="S1 = 1, S1 = 0 时 Y 的值由 I3 决定"></a>S<sub>1</sub> = 1, S<sub>1</sub> = 0 时 Y 的值由 I<sub>3</sub> 决定</h4><img src="/2019/09/19/select-poll-epoll/multiplexers_S1_S0_I3.png" title="multiplexers_S1_S0_I3"><blockquote><p>S1 = 1, S0 = 1. 此时的 I0, I1, I2, 无论是 0 还是 1, 对应的 <code>and gate</code> 输出都是 0, 对最终输出 <code>Y</code> 没有影响. 此时 I3 的输入决定 <code>Y</code> 的值. 也就是 <code>Y</code> = I3.</p></blockquote><h3 id="Truth-table-of-4x1-Multiplexer"><a href="#Truth-table-of-4x1-Multiplexer" class="headerlink" title="Truth table of 4x1 Multiplexer"></a>Truth table of 4x1 Multiplexer</h3><table><thead><tr><th>S1(高位)</th><th>S0(低位)</th><th>S1S0(值)</th><th>Y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>I<sub>0</sub></td></tr><tr><td>0</td><td>1</td><td>1</td><td>I<sub>1</sub></td></tr><tr><td>1</td><td>0</td><td>2</td><td>I<sub>2</sub></td></tr><tr><td>1</td><td>1</td><td>3</td><td>I<sub>3</sub></td></tr></tbody></table><h3 id="Multiplexer-Mux"><a href="#Multiplexer-Mux" class="headerlink" title="Multiplexer (Mux)"></a>Multiplexer (Mux)</h3><blockquote><p>4x1 Multiplexer 相当于提供了一种映射, Y = I<sub>(S1S0)</sub>. 通过组合S<sub>1</sub> 和 S<sub>0</sub> 的值, 可以直接得到 I<sub>S1S0</sub> 的值.也就是通过 4x1 Multiplexer 输出的 Y 值是 I<sub>0</sub>, I<sub>1</sub>, I<sub>2</sub>, I<sub>3</sub> 之一.</p></blockquote><h2 id="I-O-Multiplexing"><a href="#I-O-Multiplexing" class="headerlink" title="I/O Multiplexing"></a>I/O Multiplexing</h2><blockquote><p>I/O multiplexing 这里面的 multiplexing 指的其实是在单个线程通过记录跟踪每一个 Sock(I/O 流)的状态.<br>select, poll, epoll 都是 I/O multiplexing的具体的实现, 之所以有这三个存在，其实是他们出现是有先后顺序的.</p></blockquote><h2 id="I-O-Multiplexing-和-Multiplexer"><a href="#I-O-Multiplexing-和-Multiplexer" class="headerlink" title="I/O Multiplexing 和 Multiplexer"></a>I/O Multiplexing 和 Multiplexer</h2><blockquote><p>I<sub>0</sub>, I<sub>1</sub>, I<sub>2</sub>, I<sub>3</sub> 视为 4 个 I/O 流. 值为 1 时, 视为一个 I/O 流. 4x1 Multiplexer 作为硬件实现的 I/O multiplexing. 可以周期性的设置S<sub>1</sub> 和 S<sub>0</sub> 的值, 通过监测 Y 的输出, 得到 I<sub>0</sub>, I<sub>1</sub>, I<sub>2</sub>, I<sub>3</sub> 的输入.</p></blockquote><img src="/2019/09/19/select-poll-epoll/multiplexers_S1_S0_I0.png" title="multiplexers_S1_S0_I0"><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select 被实现以后, 很快就暴露出了很多问题.</p><ul><li>select 会修改传入的参数数组, 这个对于一个需要调用很多次的函数, 是非常不友好的.</li><li>select 如果任何一个 sock(I/O stream) 出现了数据, select 仅仅会返回, 但是并不会告诉你是那个 sock 上有数,于是你只能自己一个一个的找.<blockquote><p>相当于监测到 <code>Mutiplexer</code> 的 Y = 1, 但是不知道 I<sub>0</sub>, I<sub>1</sub>, I<sub>2</sub>, I<sub>3</sub>哪一个的输入是 1. 也就是不告诉 S<sub>1</sub> 和 S<sub>0</sub>的值, 那就只好再去具体查看一次.<br>I<sub>0</sub>, I<sub>1</sub>, I<sub>2</sub>, I<sub>3</sub>的值.</p></blockquote></li><li>select 只能监视 1024 个链接. 相当于实现了一个 1024x1 的 Mutiplexer. 只能有1024 个输入.</li><li>select 不是线程安全的.</li></ul><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><blockquote><p>修复版的 select</p><ul><li>poll 去掉了 1024 个链接的限制</li></ul></blockquote><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll 可以说是 I/O 多路复用最新的一个实现, epoll 修复了 poll 和 select 绝大部分问题, 比如:</p><ul><li>epoll 现在是线程安全的。</li><li>epoll 现在不仅告诉你 sock 组里面数据，还会告诉你具体哪个 sock 有数据, 你不用自己去找了.<blockquote><p>相当于监测到  <code>Mutiplexer</code> 的 Y = 1, 且告知了此时的 S<sub>1</sub> 和 S<sub>0</sub> 的值, 通过组合就可以知道是哪一个具体的输入是 1 了.</p></blockquote></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.tutorialspoint.com/digital_circuits/digital_circuits_multiplexers.htm" target="_blank" rel="noopener">circuits_multiplexers</a></li><li><a href="https://www.tutorialspoint.com/digital_circuits/digital_circuits_demultiplexers.htm" target="_blank" rel="noopener">circuits_demultiplexers</a></li><li><a href="https://zhuanlan.zhihu.com/p/64138532" target="_blank" rel="noopener">epoll的本质</a></li><li><a href="https://www.zhihu.com/question/32163005" target="_blank" rel="noopener">I/O multiplexing</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;弄清楚 I/O Multiplexing 和 Linux 中 select, poll, epoll 之间的关系.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;multiplexer&quot;&gt;&lt;a href=&quot;#multiplexer&quot; clas
      
    
    </summary>
    
    
    
      <category term="io" scheme="http://stardustman.github.io/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>wireshark</title>
    <link href="http://stardustman.github.io/2019/09/10/wireshark/"/>
    <id>http://stardustman.github.io/2019/09/10/wireshark/</id>
    <published>2019-09-10T01:51:07.000Z</published>
    <updated>2019-09-10T06:26:33.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Wireshark-Windows-配置-SSL"><a href="#Wireshark-Windows-配置-SSL" class="headerlink" title="Wireshark Windows 配置 SSL"></a>Wireshark Windows 配置 SSL</h2><blockquote><p>Version 3.0.3</p></blockquote><h3 id="配置-SSLKEYLOGFILE-系统变量"><a href="#配置-SSLKEYLOGFILE-系统变量" class="headerlink" title="配置 SSLKEYLOGFILE 系统变量"></a>配置 SSLKEYLOGFILE 系统变量</h3><img src="/2019/09/10/wireshark/SSLKEYLOGFILE.png" title="系统变量 SSLKEYLOGFILE"><h3 id="配置-Wireshark"><a href="#配置-Wireshark" class="headerlink" title="配置 Wireshark"></a>配置 Wireshark</h3><blockquote><p>编辑 -&gt; 首选项 -&gt; Protocols -&gt; TLS</p></blockquote><img src="/2019/09/10/wireshark/wireshark_tls_logfile.png" title="Wireshark 配置 TLS"><h3 id="重启-Wireshark"><a href="#重启-Wireshark" class="headerlink" title="重启 Wireshark"></a>重启 Wireshark</h3><h2 id="过滤器查看"><a href="#过滤器查看" class="headerlink" title="过滤器查看"></a>过滤器查看</h2><blockquote><p>视图 -&gt; 内部 -&gt; 支持的协议</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Wireshark-Windows-配置-SSL&quot;&gt;&lt;a href=&quot;#Wireshark-Windows-配置-SSL&quot; class=&quot;headerlink&quot; title=&quot;Wireshark Windows 配置 SSL&quot;&gt;&lt;/a&gt;Wireshark Wind
      
    
    </summary>
    
    
    
      <category term="network" scheme="http://stardustman.github.io/tags/network/"/>
    
      <category term="tools" scheme="http://stardustman.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>docker-practice</title>
    <link href="http://stardustman.github.io/2019/09/03/docker-practice/"/>
    <id>http://stardustman.github.io/2019/09/03/docker-practice/</id>
    <published>2019-09-03T06:20:16.000Z</published>
    <updated>2019-09-11T06:58:58.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Centos7 Linux<br>运行的 Docker 容器是: mssql-node-docker-demo-app </p></blockquote><h2 id="docker-info"><a href="#docker-info" class="headerlink" title="docker info"></a>docker info</h2><img src="/2019/09/03/docker-practice/docker-info.png" title="docker info 得到的信息"><h2 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Id"</span>: <span class="string">"405a378d6f88f903dda5972dbfb8f037efff22296c3aaf4c50d44ebd68ad8655"</span>,</span><br><span class="line">        <span class="attr">"Created"</span>: <span class="string">"2019-08-01T02:57:14.067532309Z"</span>,</span><br><span class="line">        <span class="attr">"Path"</span>: <span class="string">"/bin/sh"</span>,</span><br><span class="line">        <span class="attr">"Args"</span>: [</span><br><span class="line">            <span class="string">"-c"</span>,</span><br><span class="line">            <span class="string">"/bin/bash ./entrypoint.sh"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"State"</span>: &#123;</span><br><span class="line">            <span class="attr">"Status"</span>: <span class="string">"running"</span>,</span><br><span class="line">            <span class="attr">"Running"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"Paused"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"Restarting"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"OOMKilled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"Dead"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"Pid"</span>: <span class="number">12164</span>,</span><br><span class="line">            <span class="attr">"ExitCode"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"Error"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"StartedAt"</span>: <span class="string">"2019-08-22T06:08:43.334320939Z"</span>,</span><br><span class="line">            <span class="attr">"FinishedAt"</span>: <span class="string">"2019-08-21T09:25:32.130119566Z"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        "Image": "sha256:e600f86aa4e2aced43a193a28aa507651bfb77daa09ca8dbf286451a630cf27e", // node-web-app 的 docker 镜像 id</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/405a378d6f88f903dda5972dbfb8f037efff22296c3aaf4c50d44ebd68ad8655/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/405a378d6f88f903dda5972dbfb8f037efff22296c3aaf4c50d44ebd68ad8655/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/405a378d6f88f903dda5972dbfb8f037efff22296c3aaf4c50d44ebd68ad8655/hosts",</span><br><span class="line">        "LogPath": "",</span><br><span class="line">        "Name": "/friendly_hamilton", // docker container 的名称</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2", // storage driver</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": &#123;</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": &#123;</span><br><span class="line">                "Type": "journald",</span><br><span class="line">                "Config": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": &#123;</span><br><span class="line">                "1433/tcp": [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"HostIp"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"HostPort"</span>: <span class="string">"1433"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                "8080/tcp": [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"HostIp"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"HostPort"</span>: <span class="string">"8080"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            "RestartPolicy": &#123;</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            &#125;,</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "docker-runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": null,</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DiskQuota": 0,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": -1,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": 0,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0</span><br><span class="line">        &#125;,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Name": "overlay2",</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2-init/diff:/var/lib/docker/overlay2/83b7194d94d42c0ef8f78a2f4105cc7a7a215a8e885b695a933a8f8212db9cfa/diff:/var/lib/docker/overlay2/9549118d3883d39414fadf0dc17e654d1408878be3296b294711ee65ef336b98/diff:/var/lib/docker/overlay2/8e85764472e79d42f469dd3681883cd415e85098d6c42fb3dd239471212f87b3/diff:/var/lib/docker/overlay2/8dc8ec519bade76b07994adc690d1e6fcad408147835198a250b4c66c489a151/diff:/var/lib/docker/overlay2/b07d1c7463b2a4ff25f7800729381fdf5b036c12a065973b9d079580c3a50a5e/diff:/var/lib/docker/overlay2/60c9257cc9d8a7ac4b66d1c4cae5ff994471976f0a344f8ac1856a4fba7b290e/diff:/var/lib/docker/overlay2/2a00c5b47427e151e000ffe05de8121e956dbf15b0d356cfc9ad2754dc5554d5/diff:/var/lib/docker/overlay2/3495bcc2d508cbdad81b1f3eb49645fe0eb05caf0e99fbb6310d40fbdd8118a2/diff:/var/lib/docker/overlay2/9df322481c6f8b91b3583016634664e6ad991b8b846a9585385227a02b898770/diff:/var/lib/docker/overlay2/163747850da2115bac28b39ac6d2e08ca5c0e409fe6cae624155f8e61489aacd/diff:/var/lib/docker/overlay2/52405978404b67e0a67ba95cb12682d0e8a8ae781fd2b21dc2ab94197e97c38b/diff:/var/lib/docker/overlay2/c987c31253bca839eb789feb3e4fe7bc247b1e88dc88c67e2b4209fc26025fe8/diff:/var/lib/docker/overlay2/ed663d4b2fffda783f9b69e5eb7c139f34142e0e2d868460a3c1e1d925ec3e7e/diff:/var/lib/docker/overlay2/a0e3d07a65b7ee70d3869fa41418ecf71056b9ac0ba1182170621c83c77bba94/diff:/var/lib/docker/overlay2/aa4c66b37aae4e55a94aa60ac763a60851af34271ccb1a80f547e3d90e7ac2bf/diff:/var/lib/docker/overlay2/527b1a014d302c1fe835d778be6cd008de6741d290fbc0f2e64e3f25f7a7b8d0/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2/work"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">                <span class="attr">"Name"</span>: <span class="string">"7bc1a7ad23925077cf8463c2d7a21b0cafc7d91305d89504f85fa76c33138834"</span>,</span><br><span class="line">                "Source": "/var/lib/docker/volumes/7bc1a7ad23925077cf8463c2d7a21b0cafc7d91305d89504f85fa76c33138834/_data", // host 主机的被挂在的目录</span><br><span class="line">                "Destination": "/var/opt/mssql", // Volume 挂载点</span><br><span class="line">                "Driver": "local",</span><br><span class="line">                "Mode": "",</span><br><span class="line">                "RW": true,</span><br><span class="line">                "Propagation": ""</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "405a378d6f88",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "1433/tcp": &#123;&#125;,</span><br><span class="line">                "8080/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "ACCEPT_EULA=Y",</span><br><span class="line">                "SA_PASSWORD=Yukon900",</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                <span class="string">"/bin/bash ./entrypoint.sh"</span></span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "node-web-app",</span><br><span class="line">            "Volumes": &#123;</span><br><span class="line">                "/var/opt/mssql": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "WorkingDir": "/usr/src/app",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "com.microsoft.product": "Microsoft SQL Server",</span><br><span class="line">                "com.microsoft.version": "14.0.3048.4",</span><br><span class="line">                "vendor": "Microsoft"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "d21ee4834e9078042da65677d8db9717748eb7f86a6954c5e4eee29636159aa7",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": &#123;</span><br><span class="line">                "1433/tcp": [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"HostIp"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">                        <span class="attr">"HostPort"</span>: <span class="string">"1433"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                "8080/tcp": [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"HostIp"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">                        <span class="attr">"HostPort"</span>: <span class="string">"8080"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/d21ee4834e90",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "46dac1ff81a297ede919100e0d06a743b845e34b802b54bca8cb8f02dcd33c85",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.2",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">            "Networks": &#123;</span><br><span class="line">                "bridge": &#123;</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "a8af0599996912141c3f2ce4b0a2bcc48eea9164a35672aac6307333450acb6b", //a8af05999969 </span><br><span class="line">                    "EndpointID": "46dac1ff81a297ede919100e0d06a743b845e34b802b54bca8cb8f02dcd33c85",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.2",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:02" </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="docker-volume"><a href="#docker-volume" class="headerlink" title="docker volume"></a>docker volume</h2><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="attr">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">             <span class="attr">"Name"</span>: <span class="string">"7bc1a7ad23925077cf8463c2d7a21b0cafc7d91305d89504f85fa76c33138834"</span>,</span><br><span class="line">             "Source": "/var/lib/docker/volumes/7bc1a7ad23925077cf8463c2d7a21b0cafc7d91305d89504f85fa76c33138834/_data", // host 主机的被挂载的目录</span><br><span class="line">             "Destination": "/var/opt/mssql", // Volume 挂载点</span><br><span class="line">             "Driver": "local",</span><br><span class="line">             "Mode": "",</span><br><span class="line">             "RW": true,</span><br><span class="line">             "Propagation": ""</span><br><span class="line">         &#125;</span><br><span class="line">     ]</span><br></pre></td></tr></table></figure><h2 id="Local-Docker-container-网络"><a href="#Local-Docker-container-网络" class="headerlink" title="Local Docker container 网络"></a>Local Docker container 网络</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"ResolvConfPath"</span>: <span class="string">"/var/lib/docker/containers/405a378d6f88f903dda5972dbfb8f037efff22296c3aaf4c50d44ebd68ad8655/resolv.conf"</span>,</span><br><span class="line"><span class="attr">"HostnamePath"</span>: <span class="string">"/var/lib/docker/containers/405a378d6f88f903dda5972dbfb8f037efff22296c3aaf4c50d44ebd68ad8655/hostname"</span>,</span><br><span class="line"><span class="attr">"HostsPath"</span>: <span class="string">"/var/lib/docker/containers/405a378d6f88f903dda5972dbfb8f037efff22296c3aaf4c50d44ebd68ad8655/hosts"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/09/03/docker-practice/local-var-lib-docker-container.png" title="本地存储的容器的网络配置"><h2 id="Container-网络配置"><a href="#Container-网络配置" class="headerlink" title="Container 网络配置"></a>Container 网络配置</h2><img src="/2019/09/03/docker-practice/container-etc.png" title="容器的网络配置"><h2 id="Docker-Images-分层"><a href="#Docker-Images-分层" class="headerlink" title="Docker Images 分层"></a>Docker Images 分层</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"GraphDriver"</span>: &#123;</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">            <span class="attr">"Data"</span>: &#123;</span><br><span class="line">                <span class="attr">"LowerDir"</span>: <span class="string">"/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2-init/diff:/var/lib/docker/overlay2/83b7194d94d42c0ef8f78a2f4105cc7a7a215a8e885b695a933a8f8212db9cfa/diff:/var/lib/docker/overlay2/9549118d3883d39414fadf0dc17e654d1408878be3296b294711ee65ef336b98/diff:/var/lib/docker/overlay2/8e85764472e79d42f469dd3681883cd415e85098d6c42fb3dd239471212f87b3/diff:/var/lib/docker/overlay2/8dc8ec519bade76b07994adc690d1e6fcad408147835198a250b4c66c489a151/diff:/var/lib/docker/overlay2/b07d1c7463b2a4ff25f7800729381fdf5b036c12a065973b9d079580c3a50a5e/diff:/var/lib/docker/overlay2/60c9257cc9d8a7ac4b66d1c4cae5ff994471976f0a344f8ac1856a4fba7b290e/diff:/var/lib/docker/overlay2/2a00c5b47427e151e000ffe05de8121e956dbf15b0d356cfc9ad2754dc5554d5/diff:/var/lib/docker/overlay2/3495bcc2d508cbdad81b1f3eb49645fe0eb05caf0e99fbb6310d40fbdd8118a2/diff:/var/lib/docker/overlay2/9df322481c6f8b91b3583016634664e6ad991b8b846a9585385227a02b898770/diff:/var/lib/docker/overlay2/163747850da2115bac28b39ac6d2e08ca5c0e409fe6cae624155f8e61489aacd/diff:/var/lib/docker/overlay2/52405978404b67e0a67ba95cb12682d0e8a8ae781fd2b21dc2ab94197e97c38b/diff:/var/lib/docker/overlay2/c987c31253bca839eb789feb3e4fe7bc247b1e88dc88c67e2b4209fc26025fe8/diff:/var/lib/docker/overlay2/ed663d4b2fffda783f9b69e5eb7c139f34142e0e2d868460a3c1e1d925ec3e7e/diff:/var/lib/docker/overlay2/a0e3d07a65b7ee70d3869fa41418ecf71056b9ac0ba1182170621c83c77bba94/diff:/var/lib/docker/overlay2/aa4c66b37aae4e55a94aa60ac763a60851af34271ccb1a80f547e3d90e7ac2bf/diff:/var/lib/docker/overlay2/527b1a014d302c1fe835d778be6cd008de6741d290fbc0f2e64e3f25f7a7b8d0/diff"</span>,</span><br><span class="line">                <span class="attr">"MergedDir"</span>: <span class="string">"/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2/merged"</span>,</span><br><span class="line">                <span class="attr">"UpperDir"</span>: <span class="string">"/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2/diff"</span>,</span><br><span class="line">                <span class="attr">"WorkDir"</span>: <span class="string">"/var/lib/docker/overlay2/efead8cb8732e4ccfc24485c253d02838842d6dfd9a2ee60a9142c69cb54f4a2/work"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MergedDir"><a href="#MergedDir" class="headerlink" title="MergedDir"></a>MergedDir</h3><blockquote><p>这个 MergedDir 层就是一个 Linux 镜像 </p></blockquote><img src="/2019/09/03/docker-practice/merged-dir.png" title="镜像 Merged 层"><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><p><a href="https://github.com/twright-msft/mssql-node-docker-demo-app/blob/master/Dockerfile" target="_blank" rel="noopener">mssql-node-docker-demo-app</a></p></li><li><p><a href="https://docs.docker.com/storage/storagedriver/" target="_blank" rel="noopener">storage driver</a></p></li><li><p><a href="https://medium.com/better-programming/about-var-run-docker-sock-3bfd276e12fd" target="_blank" rel="noopener">var-run-docker-sock</a></p></li><li><p><a href="https://blog.csdn.net/boling_cavalry/article/details/92846483" target="_blank" rel="noopener">docker 的 /var/run/docker.sock 参数</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Centos7 Linux&lt;br&gt;运行的 Docker 容器是: mssql-node-docker-demo-app &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;docker-info&quot;&gt;&lt;a href=&quot;#docker-info&quot; c
      
    
    </summary>
    
    
    
      <category term="docker" scheme="http://stardustman.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-environment-setup</title>
    <link href="http://stardustman.github.io/2019/07/22/hadoop-environment-setup/"/>
    <id>http://stardustman.github.io/2019/07/22/hadoop-environment-setup/</id>
    <published>2019-07-22T02:40:05.000Z</published>
    <updated>2019-07-22T09:12:14.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ol><li>CentOS-7-x86_64-Minimal-1810</li><li>hadoop-3.2.0</li><li>jdk8</li><li>vmware 链接克隆 5 台虚拟机</li><li>192.168.126.133 s101</li><li>192.168.126.134 s102</li><li>192.168.126.135 s103</li><li>192.168.126.136 s104</li><li>192.168.126.137 s105</li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="centos7-minimal-配置静态-ip"><a href="#centos7-minimal-配置静态-ip" class="headerlink" title="centos7-minimal 配置静态 ip"></a>centos7-minimal 配置静态 ip</h3><ol><li>vim /etc/sysconfig/network-scripts/ifcfg-ens33</li><li>静态ip配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static #need</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=f5fd61b8-7255-4de9-ae68-5047e1586589</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no #need</span><br><span class="line">IPADDR=192.168.126.137 #need</span><br><span class="line">NETMASK=255.255.255.0 #need</span><br><span class="line">GATEWAY=192.168.126.2 #need</span><br></pre></td></tr></table></figure></li></ol><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ol><li><p>vim /etc/profile 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/soft/java8</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure></li><li><p>source /etc/profile</p></li><li><p>java -version</p></li></ol><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><ol><li><p>vim /etc/profile 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/soft/hadoop-3.2.0</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure></li><li><p>source /etc/profile</p></li><li><p>hadoop version<br>## </p></li></ol><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="http://www.mustbegeek.com/configure-static-ip-address-in-centos/" target="_blank" rel="noopener">centos7-static-ip-config</a></li><li><a href="https://www.liquidweb.com/kb/install-java-8-on-centos-7/" target="_blank" rel="noopener">centos7-openjdk-install</a></li><li><a href="https://blog.csdn.net/crxmai/article/details/49767673" target="_blank" rel="noopener">centos7-minimal-network-enable</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CentOS-7-x86_64-Minimal-1810&lt;/li&gt;
&lt;li&gt;hadoop-3.2.0&lt;/li&gt;

      
    
    </summary>
    
    
    
      <category term="hadoop" scheme="http://stardustman.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>clang-structure</title>
    <link href="http://stardustman.github.io/2019/07/17/clang-structure/"/>
    <id>http://stardustman.github.io/2019/07/17/clang-structure/</id>
    <published>2019-07-17T02:48:46.000Z</published>
    <updated>2019-07-17T02:50:34.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="size-of-structure"><a href="#size-of-structure" class="headerlink" title="size of structure"></a>size of structure</h1><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol><li><a href="https://www.geeksforgeeks.org/flexible-array-members-structure-c/" target="_blank" rel="noopener">flexible-array-members-structure-c</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;size-of-structure&quot;&gt;&lt;a href=&quot;#size-of-structure&quot; class=&quot;headerlink&quot; title=&quot;size of structure&quot;&gt;&lt;/a&gt;size of structure&lt;/h1&gt;&lt;h1 id=&quot;refer
      
    
    </summary>
    
    
    
      <category term="clang" scheme="http://stardustman.github.io/tags/clang/"/>
    
  </entry>
  
  <entry>
    <title>asm-how-recursion-function-execute</title>
    <link href="http://stardustman.github.io/2019/07/06/asm-how-recursion-function-execute/"/>
    <id>http://stardustman.github.io/2019/07/06/asm-how-recursion-function-execute/</id>
    <published>2019-07-06T08:35:51.000Z</published>
    <updated>2019-09-10T06:53:44.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>第一个月初有一对刚诞生的兔子<br>第二个月之后(第三个月)它们可以生育<br>每月每对可生育的兔子会诞生下一对新兔子<br>兔子永不死<br>问第 n 月有多少对兔子?</p></blockquote><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><blockquote><p>假设在n月有兔子总共 a 对, n+1 月总共有 b 对. 在 n+2 月必定总共有 a+b 对: 因为在 n+2 月的时候, 前一月(n+1月) 的 b 对兔子可以存留至第 n+2 月(在当月属于新诞生的兔子尚不能生育). 而新生育出的兔子对数等于所有在 n 月就已存在的 a 对.</p></blockquote><img src="/2019/07/06/asm-how-recursion-function-execute/fibonacci-sequence.png" title="fibonacci-sequence"><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C 代码"></a>C 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">fib</span><span class="params">(<span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    result = fib(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//printf("%d\n",result);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Asm-代码"><a href="#Asm-代码" class="headerlink" title="Asm 代码"></a>Asm 代码</h2><h3 id="中间代码"><a href="#中间代码" class="headerlink" title="中间代码"></a>中间代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">fib(long):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        pushq   %rbx</span><br><span class="line">        subq    $24, %rsp</span><br><span class="line">        movq    %rdi, -24(%rbp) // n</span><br><span class="line">        cmpq    $2, -24(%rbp)   // n - 2</span><br><span class="line">        jg      .L2 </span><br><span class="line">        movl    $1, %eax        // n &lt;= 2</span><br><span class="line">        jmp     .L3</span><br><span class="line">.L2:</span><br><span class="line">        movq    -24(%rbp), %rax // n</span><br><span class="line">        subq    $1, %rax // n - 1</span><br><span class="line">        movq    %rax, %rdi</span><br><span class="line">        call    fib(long)</span><br><span class="line"></span><br><span class="line">        movq    %rax, %rbx // </span><br><span class="line">        movq    -24(%rbp), %rax // n</span><br><span class="line">        subq    $2, %rax // n - 2</span><br><span class="line">        movq    %rax, %rdi</span><br><span class="line">        call    fib(long)</span><br><span class="line">        addq    %rbx, %rax</span><br><span class="line">.L3:</span><br><span class="line">        addq    $24, %rsp // 释放分配的栈空间</span><br><span class="line">        popq    %rbx</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br><span class="line">main:</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        movl    $3, %edi  // n = 3</span><br><span class="line">        call    fib(long)</span><br><span class="line">        movq    %rax, -8(%rbp) // result = fib(3)</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        leave</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><img src="/2019/07/06/asm-how-recursion-function-execute/fib-label.png"><h3 id="反编译可执行代码"><a href="#反编译可执行代码" class="headerlink" title="反编译可执行代码"></a>反编译可执行代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">fib(long):</span><br><span class="line">        push   %rbp</span><br><span class="line">        mov    %rsp,%rbp</span><br><span class="line">        push   %rbx</span><br><span class="line">        sub    $0x18,%rsp</span><br><span class="line">        mov    %rdi,-0x18(%rbp)</span><br><span class="line">        cmpq   $0x2,-0x18(%rbp)</span><br><span class="line">        jg     4004cd &lt;fib(long)+0x1b&gt; // 0x1b 是地址为 4004cd 这条指令之前的所有指令的字节数</span><br><span class="line">        mov    $0x1,%eax</span><br><span class="line">        jmp    4004f3 &lt;fib(long)+0x41&gt; // 0x41 是地址为 4004f3 这条指令之前的所有指令的字节数</span><br><span class="line">        mov    -0x18(%rbp),%rax</span><br><span class="line">        sub    $0x1,%rax</span><br><span class="line">        mov    %rax,%rdi</span><br><span class="line">        callq  4004b2 &lt;fib(long)&gt;</span><br><span class="line">        mov    %rax,%rbx</span><br><span class="line">        mov    -0x18(%rbp),%rax</span><br><span class="line">        sub    $0x2,%rax</span><br><span class="line">        mov    %rax,%rdi</span><br><span class="line">        callq  4004b2 &lt;fib(long)&gt;</span><br><span class="line">        add    %rbx,%rax</span><br><span class="line">        add    $0x18,%rsp</span><br><span class="line">        pop    %rbx</span><br><span class="line">        pop    %rbp</span><br><span class="line">        retq   </span><br><span class="line">main:</span><br><span class="line">        push   %rbp</span><br><span class="line">        mov    %rsp,%rbp</span><br><span class="line">        sub    $0x10,%rsp</span><br><span class="line">        movq   $0x0,-0x8(%rbp)</span><br><span class="line">        mov    $0x4,%edi</span><br><span class="line">        callq  4004b2 &lt;fib(long)&gt;</span><br><span class="line">        mov    %rax,-0x8(%rbp)</span><br><span class="line">        mov    $0x0,%eax</span><br><span class="line">        leaveq </span><br><span class="line">        retq   </span><br><span class="line">        nop</span><br></pre></td></tr></table></figure><img src="/2019/07/06/asm-how-recursion-function-execute/fib.png" title="fib"><blockquote><p>fib(n)函数里调用 fib(n - 1) 和 fib(n - 2)视为两个和 fib(n) 完全不同的函数, 因为函数返回地址在汇编层面根本不一样.fib(n), fib(n - 1) 和 fib(n - 2) 的处理逻辑不一样, 只是之间有依赖而已. 也可以视为编译器级别的函数重载. 理解成三个不同的函数, 这个递归就很好理解了.</p></blockquote><h2 id="调用栈调用顺序分析"><a href="#调用栈调用顺序分析" class="headerlink" title="调用栈调用顺序分析"></a>调用栈调用顺序分析</h2><h3 id="调用栈图解分析"><a href="#调用栈图解分析" class="headerlink" title="调用栈图解分析"></a>调用栈图解分析</h3><img src="/2019/07/06/asm-how-recursion-function-execute/fib(4)-call-stack.png" title="fib(4)调用栈分析"><h3 id="符合递归终止时调用栈执行顺序"><a href="#符合递归终止时调用栈执行顺序" class="headerlink" title="符合递归终止时调用栈执行顺序"></a>符合递归终止时调用栈执行顺序</h3><blockquote><p>fib(3) = fib(2) + fib(1), 就符合递归退出的条件.</p></blockquote><h4 id="代码执行顺序"><a href="#代码执行顺序" class="headerlink" title="代码执行顺序"></a>代码执行顺序</h4><img src="/2019/07/06/asm-how-recursion-function-execute/fib(3)-execute-sequence.png" title="第一次执行到fib(3)调用流程"><h4 id="二叉树后序遍历的视角来分析"><a href="#二叉树后序遍历的视角来分析" class="headerlink" title="二叉树后序遍历的视角来分析"></a>二叉树后序遍历的视角来分析</h4><blockquote><p>递归终止条件:<br>fib(2) = 1 视为左叶子节点<br>fib(1) = 1 视为右叶子节点<br>fib(3) = fib(2) + fib(1) 视为父节点</p></blockquote><img src="/2019/07/06/asm-how-recursion-function-execute/fib(3)-execute-squence-treefy.png" title="符合递归退出代码执行流程"><blockquote><p>fib(3) 调用 fib(2), 计算出参数 n = 2. 进入左叶子节点.<br>fib(2) 返回 fib(3), fib(2) 的返回值 rax = 1, 复制给 rbx.<br>fib(3) 调用 fib(1), 计算出参数 n = 1. 进入右叶子节点.<br>fib(1) 返回 fib(3), fib(1) 的返回值 rax = 1<br>fib(3) 计算 fib(3) = fib(2) + fib(1) = rbx + rax = 1 + 1 = 2</p></blockquote><h4 id="栈帧的创建和销毁-二叉树后序遍历"><a href="#栈帧的创建和销毁-二叉树后序遍历" class="headerlink" title="栈帧的创建和销毁-二叉树后序遍历"></a>栈帧的创建和销毁-二叉树后序遍历</h4><blockquote><p>fib(n) = fib(n-1) + fib(n-2)(n &gt; 2) 递归调用可以看作是栈帧按照二叉树按照后续遍历的顺序动态的创建和销毁.<br>着色方框为创建的栈帧<br>白色方框为销毁的栈帧或者还未创建的栈帧<br>方框由白色变为着色: 栈帧创建<br>方框由着色变为白色: 栈帧销毁</p></blockquote><img src="/2019/07/06/asm-how-recursion-function-execute/fib-dynamic-stack-frame.png" title="fib(5) 调用栈-栈帧的动态创建和销毁"><blockquote><p>从图中可以看出假如 main 调用 fib(5), 会一直调用到 f(2) 才会终止. 则调用栈状态如图 0. 此时递归最大的栈深度是 4, 如果 n 值过大, 会很容易发生 Stack Overflow 这种错误. 比方说 fib(1000) 会一直创建到 fib(2) 这个栈帧, 递归才会开始返回.<br>fib(2) 返回 1 给 fib(3), fib(3) 保存这个返回值. f(2) 栈帧销毁. 如图 1.<br>fib(3) 调用 fib(2) 如图 2.<br>fib(2) 返回 1 给 fib(3), fib(3) 将 fib(2)返回值和 fib(1) 的返回值相加. 如图 3.<br>fib(3) 返回 fib(2)返回值和 fib(1) 的返回值相加的结果. 如图 4.</p></blockquote><h5 id="效率低原因分析"><a href="#效率低原因分析" class="headerlink" title="效率低原因分析"></a>效率低原因分析</h5><blockquote><p>计算的结果并没有保存. 每一次进入递归之后都是从基本的 fib(2) 和 fib(1) 向上返回. 中间伴随着大量的栈帧创建和销毁, 以及重复的函数计算.函数栈帧的创建和销毁是耗时的操作, 这可就很慢了.<br>fib(n) 开辟栈帧总数量可以表示为: sum(n) = 2^(n - 2) + 1 (n &gt;= 3).<br>时间复杂度是: O(2^n)</p></blockquote><h5 id="运行时间测试"><a href="#运行时间测试" class="headerlink" title="运行时间测试"></a>运行时间测试</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 51</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">fib</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">clock_t</span> beginTime,endTime;</span><br><span class="line">    beginTime = clock();</span><br><span class="line">    result = fib(LENGTH - <span class="number">1</span>);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Running Time %f Seconds\n"</span>,(<span class="keyword">double</span>)(endTime - beginTime)/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d :: %lu \n"</span>, LENGTH - <span class="number">1</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>fib(n) 开辟栈帧总数量可以表示为: sum(n) = 2^(n - 2) + 1 (n &gt;= 3).<br>时间复杂度是: O(2^n)<br>fib(50) 开辟栈帧总量是: sum(50) = 2^(48) + 1<br>时间复杂度是: O(2 ^ 50)<br>计算 fib(50) 费了 65 秒左右</p></blockquote><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><blockquote><p>用数组保存已经计算出来的 fib(n) 的结果. 修改计算逻辑, 如果 fib(n) 已经被计算, 直接使用, 不再进入递归计算.<br>这可不就是有拿空间换时间的感觉.</p></blockquote><h2 id="优化递归"><a href="#优化递归" class="headerlink" title="优化递归"></a>优化递归</h2><h3 id="空间换时间优化代码"><a href="#空间换时间优化代码" class="headerlink" title="空间换时间优化代码"></a>空间换时间优化代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> LENGTH 51</span></span><br><span class="line"><span class="comment">// 计算 fib(50)</span></span><br><span class="line"><span class="comment">// 全局的用来保存 fib(n)(n &gt; 2) 计算结果的数组.</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> result[LENGTH];</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">fib</span><span class="params">(<span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// fib(n) 已经被计算, 那就直接返回.</span></span><br><span class="line">    <span class="keyword">if</span>(result[n] != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result[n];</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">       保存 fib(n) 的计算结果</span><br><span class="line">       result[n] =  fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</span><br><span class="line">    &#125; </span><br><span class="line">   <span class="keyword">return</span> result[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> beginTime,endTime;</span><br><span class="line">    <span class="comment">// 由于 1, 1, 2, 3, 5 ..... 都是大于 0 的结果, 全部初始化为 0, 相当于都没有计算结果.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH ; i++)&#123;</span><br><span class="line">        result[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fib(1) 的计算结果为 1</span></span><br><span class="line">    result[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// fib(2) 的计算结果为 1</span></span><br><span class="line">    result[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    beginTime = clock();</span><br><span class="line">    fib(LENGTH - <span class="number">1</span>);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Running Time %f Seconds\n"</span>,(<span class="keyword">double</span>)(endTime - beginTime)/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; LENGTH; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %i :: %lu \n"</span>, i, result[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化递归函数栈帧"><a href="#优化递归函数栈帧" class="headerlink" title="优化递归函数栈帧"></a>优化递归函数栈帧</h3><img src="/2019/07/06/asm-how-recursion-function-execute/fib-optimize-stack-frame.png" title="fib(5)递归栈帧"><blockquote><p>着色方框-开辟销毁的栈帧<br>白色方框-不用开辟的栈帧<br>优化后的 fib(n) 开辟栈帧总数量可以表示为: sum(n) = (n - 2)(n &gt;= 3).<br>时间复杂度是: O(n)<br>计算 fib(50) 开辟栈帧总数量是: sum(50) = 48<br>fib(50) = 3996334433<br>时间复杂度是 O(50), 结果几乎秒算.<br>unsigned long result[LENGTH];<br>拿空间换时间, 其实这句话有问题的, 拿出来空间, 计算逻辑也是要优化的. </p></blockquote><h3 id="尾递归优化"><a href="#尾递归优化" class="headerlink" title="尾递归优化"></a>尾递归优化</h3><h4 id="非优化递归"><a href="#非优化递归" class="headerlink" title="非优化递归"></a>非优化递归</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">fib</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里 fib(n-1) 和 fib(n-2) 与 fib(n) 其实根本不是同一个函数.<br>三者的逻辑其实不同, 但是函数之间有依赖.</p></blockquote><h4 id="优化递归-1"><a href="#优化递归-1" class="headerlink" title="优化递归"></a>优化递归</h4><blockquote><p>尾递归的实现, 往往需要改写递归函数, 确保最后一步只调用自身. 做到这一点的方法, 就是把所有用到的内部变量改写成函数的参数.<br>尾调用的概念非常简单, 一句话就能说清楚, 就是指某个函数的最后一步是调用另一个函数.</p></blockquote><h5 id="中间变量改成函数的参数"><a href="#中间变量改成函数的参数" class="headerlink" title="中间变量改成函数的参数"></a>中间变量改成函数的参数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">fib</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> n, <span class="keyword">unsigned</span> <span class="keyword">long</span> prev, <span class="keyword">unsigned</span> <span class="keyword">long</span> sum )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>, sum , prev + sum); <span class="comment">// 尾调用</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; 这里 fib(n<span class="number">-1</span>, sum , prev + sum) 的才是和 fib(<span class="keyword">unsigned</span> <span class="keyword">long</span> n, <span class="keyword">unsigned</span> <span class="keyword">long</span> prev, <span class="keyword">unsigned</span> <span class="keyword">long</span> sum ) 完全一样的函数.</span><br></pre></td></tr></table></figure><h5 id="包装一层"><a href="#包装一层" class="headerlink" title="包装一层"></a>包装一层</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span>   <span class="title">fibonacc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 1 : fib(2)</span></span><br><span class="line">    <span class="comment">// 2 : fib(2) + fib(1) = fib(3)</span></span><br><span class="line">    <span class="keyword">return</span> fib(n, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>计算结果保存在参数里.</p></blockquote><h5 id="fib-n-汇编代码分析"><a href="#fib-n-汇编代码分析" class="headerlink" title="fib(n) 汇编代码分析"></a>fib(n) 汇编代码分析</h5><img src="/2019/07/06/asm-how-recursion-function-execute/fib-tail-recursion.png" title="fib(n) 尾递归汇编代码"><blockquote><p>尾递归的 fib(n-1, sum , prev + sum) 是尾调用, 也就是函数执行完没有其他的操作了, 就直接返回了. 符合 n &lt;= 3 的条件, 汇编直接 jmp 到销毁栈帧的代码. 因为返回值在符合递归退出条件时, 已经被设置到 rax 里了.</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>用简单的一句话,递归就是调用函数本身. 这句话是相当不负责任的. 递归函数在汇编级别的调用自己, 尽管调用的是自己, 递归的函数名尽管相同, 但是函数返回地址是不相同的. 这也意味着其实逻辑其实完全可能不一样.<br>结合栈帧的创建和销毁, 就可以理解 Stack Overflow 这种错误.</p></blockquote><p>References</p><ol><li><a href="https://stackoverflow.com/questions/21440403/what-does-the-cmpq-instruction-do" target="_blank" rel="noopener">asm-cmpq</a></li><li><a href="https://www.aldeid.com/wiki/X86-assembly/Instructions/jg" target="_blank" rel="noopener">asm-jg</a></li><li><a href="http://faydoc.tripod.com/cpu/jg.htm" target="_blank" rel="noopener">asm-jp-table</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波那契数列</a></li><li><a href="https://godbolt.org/" target="_blank" rel="noopener">asm-tool</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/04/tail-call.html" target="_blank" rel="noopener">尾调用(tail-call)之尾递归</a></li><li><a href="https://mp.weixin.qq.com/s/GncAsmZ1dZKyNMOwN5-sjw" target="_blank" rel="noopener">动态规划</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问
      
    
    </summary>
    
    
    
      <category term="asm" scheme="http://stardustman.github.io/tags/asm/"/>
    
  </entry>
  
  <entry>
    <title>asm-clang-concepts</title>
    <link href="http://stardustman.github.io/2019/06/25/asm-clang-concepts/"/>
    <id>http://stardustman.github.io/2019/06/25/asm-clang-concepts/</id>
    <published>2019-06-25T08:57:59.000Z</published>
    <updated>2019-10-21T01:26:34.774Z</updated>
    
    <content type="html"><![CDATA[<p>C 语言里的概念在 X86-64 汇编层面的分析. 汇编风格使用 AT&amp;T 风格. 编译器是 gcc-x86-64-9.1</p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><blockquote><p>A <code>pointer</code> is a programming language object that stores the memory address of another value located in computer memory.<br> A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer.</p></blockquote><h2 id="变量地址"><a href="#变量地址" class="headerlink" title="变量地址"></a>变量地址</h2><blockquote><p>The lea (load effective address) instruction is used to put a memory address into the destination.<br>leaq  -8(%rbp), %rdx<br>-8(%rbp)等价于 mem[R[rbp] -8]. 将 rbp - 8 的值(这个值就是内存地址)复制到 rdx.</p></blockquote><h2 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h2><blockquote><p>movq    (%rax), %rdx<br>将 rax 的值(X)指向的内存地址处的值复制到 rdx. 此时 rax 的值(X)就是指针, 所谓指针在汇编层面就是将一个内存地址放到寄存器, 利用寄存器间接寻址去获取这个地址的数值. 这就是 C 语言里指针的本质. </p></blockquote><h2 id="movq-operand-combinations"><a href="#movq-operand-combinations" class="headerlink" title="movq operand combinations"></a>movq operand combinations</h2><img src="/2019/06/25/asm-clang-concepts/address-modes.png" title="movq operand combinations"><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *pa, <span class="keyword">int</span> *pb)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *pa; </span><br><span class="line">    *pa = *pb;</span><br><span class="line">    *pb = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">swap(int*, int*):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movq    %rdi, -24(%rbp) ; 将变量 a(10) 的地址(&amp;a)复制到 rbp - 24 地址处, 参数 pa</span><br><span class="line">        movq    %rsi, -32(%rbp) ; 将变量 b(100) 的地址(&amp;b)复制到 rbp - 32 地址处, 参数 pb </span><br><span class="line">        movq    -24(%rbp), %rax ; 将 rbp - 24 指向的内存地址的数值(也就是变量 a 的地址)复制到 rax</span><br><span class="line">        movl    (%rax), %eax    ; 将 rax 指向的内存地址的值 10(也就是变量 a) 复制到 eax, int a 4 Bytes 需要 32 bit 的 eax 即可.</span><br><span class="line">        movl    %eax, -4(%rbp)  ; 将 eax 的值 10 (也就是变量 a) 复制到 rbp - 4 指向的内存地址处, 完成 temp = *pa;</span><br><span class="line">        movq    -32(%rbp), %rax ; 将 rbp - 32 指向的内存地址的值(也就是变量 b 的地址) 的地址复制到 rax</span><br><span class="line">        movl    (%rax), %edx    ; 将 rax 的值指向的内存地址出的值 100(也就是变量 b) 复制到 edx, int b 4 Bytes 需要 32 bit 的 eax 即可.</span><br><span class="line">        movq    -24(%rbp), %rax ; 将 rbp - 24 指向的内存地址的值(也就是变量 a 的地址)复制到 rax</span><br><span class="line">        movl    %edx, (%rax)    ; 将 edx 的值 100 (也就是变量 b)复制到 rax 指向的地址处(也就是变量 a 的地址), 完成 *pa = *pb</span><br><span class="line">        movq    -32(%rbp), %rax ; 将 rbp - 32 指向的内存地址的值(也就是变量 b 的地址)复制到 rax</span><br><span class="line">        movl    -4(%rbp), %edx  ; 将 rbp - 4 指向的内存地址的值 10 复制到 edx</span><br><span class="line">        movl    %edx, (%rax)    ; 将 edx 的值 10 复制到 rax 指向的地址处(也就是变量 b 的地址), 完成 *pb = temp</span><br><span class="line">        nop</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    swap(&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">        pushq   %rbp ; 保存调用者的 rbp</span><br><span class="line">        movq    %rsp, %rbp ; 开辟 main 函数的栈帧</span><br><span class="line">        subq    $16, %rsp  ; 分配 main 的栈空间 16 bytes</span><br><span class="line">        movl    $10, -4(%rbp) ; 将变量 a 复制到 rbp - 4 指向的地址处.(int a, 4 bytes)</span><br><span class="line">        movl    $100, -8(%rbp) ; 将变量 b 复制到 rbp - 8 指向的地址处.(int b, 4 bytes)</span><br><span class="line">        leaq    -8(%rbp), %rdx ; 将 rbp - 8 的值复制到 rdx 寄存器(int b 变量的地址)</span><br><span class="line">        leaq    -4(%rbp), %rax ; 将 rbp - 4 的值复制到 rax 寄存器(int a 变量的地址)</span><br><span class="line">        movq    %rdx, %rsi ; 复制 rdx(第二个参数: 变量 b 的地址) 到 rsi 寄存器</span><br><span class="line">        movq    %rax, %rdi ; 复制 rax(第一个参数: 变量 a 的地址) 到 rdi 寄存器</span><br><span class="line">        call    swap(int*, int*)</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        leave   ; 等价于 1. mov %rbp, %rsp(回收分配的栈空间) 2.pop %rbp(恢复 main 的 rbp)</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><img src="/2019/06/25/asm-clang-concepts/swap-c-asm.png" title="swap-c-asm"><h3 id="栈帧分析"><a href="#栈帧分析" class="headerlink" title="栈帧分析"></a>栈帧分析</h3><img src="/2019/06/25/asm-clang-concepts/swap-pointer.png" title="main-swap-call-stack"><blockquote><p>该图是 swap 执行完 int temp = *pa 后的状态.</p></blockquote><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><blockquote><p>the return value for the function should be placed in rax if it is not already there.<br>返回值放在 rax 寄存器. 这是 x86-64 的约定. 架构设计决定只有 rax 一个寄存器存放返回值, 这也是高级语言返回值只能是一个的原因.<br>C 语言里返回的结构体, 其实也就是结构体第一个字节的地址, 还是一个值.<br>C 语言的函数返回值为 void, 在汇编层面也就是不用设置 rax.</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>指针本质就是寄存器间接寻址. 函数传参其实传的都是数值而已, 本质上都是数值的副本. </p></blockquote><h1 id="数据类型转化"><a href="#数据类型转化" class="headerlink" title="数据类型转化"></a>数据类型转化</h1><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><h3 id="x86-64-registers"><a href="#x86-64-registers" class="headerlink" title="x86-64 registers"></a>x86-64 registers</h3><img src="/2019/06/25/asm-clang-concepts/x86-64-registers.png"><h3 id="IA32-registers"><a href="#IA32-registers" class="headerlink" title="IA32 registers"></a>IA32 registers</h3><img src="/2019/06/25/asm-clang-concepts/IA32-registers.png"><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testTypeConvert</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> i64bit = <span class="number">1844674407370955199</span>;</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">int</span> i32bit = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i64bit;</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">short</span> i16bit = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i32bit;</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> i8bit = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)i16bit;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,i64bit);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,i32bit);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i16bit);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i8bit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">testTypeConvert():</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movabsq $1844674407370955199, %rax ;‭00011001 10011001 10011001 10011001 10011001 10011001 10011001 10111111‬</span><br><span class="line">        movq    %rax, -8(%rbp)</span><br><span class="line">        movq    -8(%rbp), %rax</span><br><span class="line">        movl    %eax, -12(%rbp) ; 10011001 10011001 10011001 10111111‬ (2576980415)</span><br><span class="line">        movl    -12(%rbp), %eax</span><br><span class="line">        movw    %ax, -14(%rbp) ; 10011001 10111111‬(39359)</span><br><span class="line">        movzwl  -14(%rbp), %eax ; 00000000 00000000 10011001 10111111‬ (zero extend)</span><br><span class="line">        movb    %al, -15(%rbp) ; 10111111‬(191)</span><br><span class="line">        nop</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>int 类型的数据转化, 利用不同长度的寄存器. 比如 int 转 char 类型. 直接取 int 的最后 8 位. char 转 int ,对应的寄存器高位补上 3 个字节的 0.</p><h1 id="array"><a href="#array" class="headerlink" title="array"></a>array</h1><h2 id="C代码分析"><a href="#C代码分析" class="headerlink" title="C代码分析"></a>C代码分析</h2><h3 id="sumArray"><a href="#sumArray" class="headerlink" title="sumArray"></a>sumArray</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>; </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sumArray</span><span class="params">(<span class="keyword">long</span> a[], <span class="keyword">long</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; length; i++)&#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sumMatrix"><a href="#sumMatrix" class="headerlink" title="sumMatrix"></a>sumMatrix</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumMatrix</span><span class="params">(<span class="keyword">int</span> a[M][N])</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(;i &lt; <span class="number">2</span>;i++)&#123;</span><br><span class="line">         <span class="keyword">for</span>(;j &lt; <span class="number">3</span>;j++)&#123;</span><br><span class="line">             sum += a[i][j];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> a[<span class="number">5</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> matrix[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    sum = sumArray(a, <span class="number">5</span>);</span><br><span class="line">    sum1 = sumMatrix(matrix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Asm-代码分析"><a href="#Asm-代码分析" class="headerlink" title="Asm 代码分析"></a>Asm 代码分析</h2><h3 id="sumArray-1"><a href="#sumArray-1" class="headerlink" title="sumArray"></a>sumArray</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sumArray(long*, long):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movq    %rdi, -24(%rbp) ; &amp;a[0]</span><br><span class="line">        movq    %rsi, -32(%rbp) ; length of a</span><br><span class="line">        movl    $0, -4(%rbp) ; sum</span><br><span class="line">        movl    $0, -8(%rbp) ; i</span><br><span class="line">.L3:</span><br><span class="line">        movl    -8(%rbp), %eax ; i</span><br><span class="line">        cltq</span><br><span class="line">        cmpq    %rax, -32(%rbp) ; cmpq i, length 其实也就是 i - length</span><br><span class="line">        jle     .L2</span><br><span class="line">        movl    -8(%rbp), %eax ; i</span><br><span class="line">        cltq</span><br><span class="line">        leaq    0(,%rax,8), %rdx ; rdx = 0 + 8 * i </span><br><span class="line">        movq    -24(%rbp), %rax  ; rax = &amp;a[0]</span><br><span class="line">        addq    %rdx, %rax       ; rax = &amp;a[0] + (0 + 8 * i), 地址增加 8 * i</span><br><span class="line">        movq    (%rax), %rax     ; rax = a[i]</span><br><span class="line">        movl    %eax, %edx       ; edx = a[i]</span><br><span class="line">        movl    -4(%rbp), %eax   ; eax = sum</span><br><span class="line">        addl    %edx, %eax       ; eax = a[i] + sum</span><br><span class="line">        movl    %eax, -4(%rbp)   </span><br><span class="line">        addl    $1, -8(%rbp)    ; i = i + 1</span><br><span class="line">        jmp     .L3</span><br><span class="line">.L2:</span><br><span class="line">        movl    -4(%rbp), %eax ; eax = sum</span><br><span class="line">        cltq</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><blockquote><p>通过 a[i] 访问数组的方法, 与具体的数据类型有关<br>movl    -8(%rbp), %eax ; i<br>cltq    ; convert long(32 bit) to quad(64 bit)<br>leaq    0(,%rax,8), %rdx ; rdx = 0 + 8 * i , 比例寻址. 8 是比例因子,也就是数据类型的字节数,long 8 bytes.<br>movq    -24(%rbp), %rax  ; rax = &amp;a[0]<br>addq    %rdx, %rax       ; rax = &amp;a[0] + (0 + 8 * i), 地址增加 8 * i<br>movq    (%rax), %rax     ; rax = a[i]</p></blockquote><h3 id="Asm-sumMatrix"><a href="#Asm-sumMatrix" class="headerlink" title="Asm sumMatrix"></a>Asm sumMatrix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">sumMatrix(int (*) [3]):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movq    %rdi, -24(%rbp) ; &amp;matrix[0][0]</span><br><span class="line">        movl    $0, -4(%rbp) ; sum = 0</span><br><span class="line">        movl    $0, -8(%rbp) ;i = 0</span><br><span class="line">        movl    $0, -12(%rbp);j = 0</span><br><span class="line">; 循环体开始</span><br><span class="line">.L9:</span><br><span class="line">        cmpl    $1, -8(%rbp) ; i - 1</span><br><span class="line">        jg      .L6 ; i - 1 &gt; 0 ;也就是 i = 2 时跳到 .L6, 退出循环. 否则进入内部循环.</span><br><span class="line">.L8:</span><br><span class="line">        cmpl    $2, -12(%rbp) ; cmpl 2, j</span><br><span class="line">        jg      .L7 ; j - 2 &gt; 0 ;也就是 j = 3 时,内部循环结束, 跳到 .L7. 改变 i, 进入下一轮循环</span><br><span class="line">        movl    -8(%rbp), %eax ; eax = i</span><br><span class="line">        movslq  %eax, %rdx ; rdx = i</span><br><span class="line">        movq    %rdx, %rax ; rax = i</span><br><span class="line">        addq    %rax, %rax ; rax = i + i</span><br><span class="line">        addq    %rdx, %rax ; rax = i + (i + i)</span><br><span class="line">        salq    $2, %rax ; rax = 2 * 2 * 3 * i rax 算术左移 2 位</span><br><span class="line">        movq    %rax, %rdx ; rdx = 12 * i</span><br><span class="line">        movq    -24(%rbp), %rax ; rax = &amp;matrix[0][0]</span><br><span class="line">        addq    %rax, %rdx ; rdx = &amp;matrix[0][0] + 12 * i</span><br><span class="line">        movl    -12(%rbp), %eax ; eax = j</span><br><span class="line">        cltq</span><br><span class="line">        movl    (%rdx,%rax,4), %eax ; 4 * rax + rdx = &amp;matrix[0][0] + 12 * i + 4 * j), 也就是 &amp;matrix[i][j]. eax = matrix[i][j]</span><br><span class="line">        addl    %eax, -4(%rbp) ; sum = sum + eax</span><br><span class="line">        addl    $1, -12(%rbp)  ; j = j + 1</span><br><span class="line">        jmp     .L8</span><br><span class="line">.L7:</span><br><span class="line">        addl    $1, -8(%rbp) ; i = i + 1</span><br><span class="line">        jmp     .L9</span><br><span class="line">.L6:</span><br><span class="line">        movl    -4(%rbp), %eax ; eax = sum</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><blockquote><p>int matrix[i][j]<br> movl    -8(%rbp), %eax // eax = i<br> movslq  %eax, %rdx // rdx = i<br> movq    %rdx, %rax ; rax = i<br> addq    %rax, %rax ; rax = i + i<br> addq    %rdx, %rax ; rax = i + (i + i)<br> salq    $2, %rax ; rax = 2 * 2 * 3 * i rax 算术左移 2 位<br> movq    %rax, %rdx ; rdx = 12 * i<br> movq    -24(%rbp), %rax ; rax = &amp;matrix[0][0]<br> addq    %rax, %rdx ; rdx = &amp;matrix[0][0] + 12 * i<br> movl    -12(%rbp), %eax ; eax = j<br> cltq<br> movl    (%rdx,%rax,4), %eax ; 4 * rax + rdx = 4 * j + &amp;matrix[0][0] + 12 * i ), 也就是 &amp;matrix[i][j]. eax = matrix[i][j]. sizeOf(int) = 4<br>在 main 中可知 matrix[0][0],matrix[0][1] … matrix[1][1],matrix[1][2]顺序排列<br>当 i = 0, j = 0 时 4 * 0 + &amp;matrix[0][0] + 12 * 0 = &amp;matrix[0][0]<br>当 i = 0, j = 1 时 4 * 1 + &amp;matrix[0][0] + 12 * 0 = &amp;matrix[0][1]<br>当 i = 1, j = 0 时 4 * 0 + &amp;matrix[0][0] + 12 * 1, 此时是 &amp;matrix[0][0] + 12,<br>二维数组每一行的字节总数是: 3(每一行 3 个 int) * 4(int 数据大小), 此时的地址是 &amp;matrix[1][0]<br>C 语言中二维数组作为函数参数传递时, 一定要给出列的数目, 不需要行数. 因为根据列数和数据类型的大小,就能算出下一行的第一个数据偏移起始位置. 偏移量 = 列数 * sizeOf(Data type)  </p></blockquote><h3 id="Asm-main"><a href="#Asm-main" class="headerlink" title="Asm main"></a>Asm main</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        subq    $96, %rsp ; 分配栈空间</span><br><span class="line">        movq    $0, -8(%rbp) ; sum</span><br><span class="line">        movl    $0, -12(%rbp) ; sum1</span><br><span class="line">        movq    $11, -64(%rbp) ; a[0]</span><br><span class="line">        movq    $22, -56(%rbp) ; a[1]</span><br><span class="line">        movq    $33, -48(%rbp) ; a[2]</span><br><span class="line">        movq    $44, -40(%rbp) ; a[3]</span><br><span class="line">        movq    $55, -32(%rbp) ; a[4]</span><br><span class="line">        movl    $1, -96(%rbp)  ; matrix[0][0]</span><br><span class="line">        movl    $2, -92(%rbp)  ; matrix[0][1]</span><br><span class="line">        movl    $3, -88(%rbp)  ; matrix[0][2]</span><br><span class="line">        movl    $4, -84(%rbp)  ; matrix[1][0]</span><br><span class="line">        movl    $5, -80(%rbp)  ; matrix[1][1]</span><br><span class="line">        movl    $6, -76(%rbp)  ; matrix[1][2]</span><br><span class="line">        ; call sumArray</span><br><span class="line">        leaq    -64(%rbp), %rax ; a[0] 的地址</span><br><span class="line"></span><br><span class="line">        movl    $5, %esi ; length of a, 第二个参数</span><br><span class="line">        movq    %rax, %rdi ; a[0] 的地址作为第一个参数</span><br><span class="line">        call    sumArray(long*, long)</span><br><span class="line">        movq    %rax, -8(%rbp) ; 返回值复制给 sum</span><br><span class="line">        ; call sumMatrix</span><br><span class="line">        leaq    -96(%rbp), %rax ; matrix[0][0] 的地址</span><br><span class="line"></span><br><span class="line">        movq    %rax, %rdi ; matrix[0][0] 的地址作为第一个参数</span><br><span class="line">        call    sumMatrix(int (*) [3])</span><br><span class="line">        movl    %eax, -12(%rbp) ; 返回值复制给 sum1</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        leave   </span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><blockquote><p>由 main 可以看出, 编译器对待数组 a , a 就是数组第一个元素的地址.</p></blockquote><h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><blockquote><p>A struct in the C programming language (and many derivatives) is a composite data type (or record) declaration that defines a physically grouped list of variables to be placed under one name in a block of memory, allowing the different variables to be accessed via a single pointer, or the struct declared name which returns the same address.</p></blockquote><h2 id="Code-Analysis"><a href="#Code-Analysis" class="headerlink" title="Code Analysis"></a>Code Analysis</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">long</span> score;</span><br><span class="line">    <span class="keyword">long</span> age;</span><br><span class="line"></span><br><span class="line">&#125; Student;</span><br><span class="line">; 结构体指针作为参数</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testStruct</span><span class="params">(Student* s)</span></span>&#123;</span><br><span class="line">    s-&gt;id = <span class="number">10</span>;</span><br><span class="line">    s-&gt;score = <span class="number">100</span>;</span><br><span class="line">    s-&gt;age = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; 返回结构体</span><br><span class="line"><span class="function">Student <span class="title">buildStruct</span><span class="params">(<span class="keyword">long</span> id, <span class="keyword">long</span> score, <span class="keyword">long</span> age)</span></span>&#123;</span><br><span class="line">    Student s;</span><br><span class="line">    s.id = id;</span><br><span class="line">    s.score = score;</span><br><span class="line">    s.age = age;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student s ;</span><br><span class="line">    Student ss;</span><br><span class="line">    s.id = <span class="number">1</span>;</span><br><span class="line">    s.score = <span class="number">10</span>;</span><br><span class="line">    s.age = <span class="number">100</span>;</span><br><span class="line">    testStruct(&amp;s);</span><br><span class="line">    ss = buildStruct(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Asm"><a href="#Asm" class="headerlink" title="Asm"></a>Asm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">testStruct(Student*):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movq    %rdi, -8(%rbp) ; s 的地址</span><br><span class="line">        movq    -8(%rbp), %rax</span><br><span class="line">        movq    $10, (%rax) ; s-&gt;id = 10</span><br><span class="line">        movq    -8(%rbp), %rax</span><br><span class="line">        movq    $100, 8(%rax) ; s-&gt;score = 100</span><br><span class="line">        movq    -8(%rbp), %rax</span><br><span class="line">        movq    $1000, 16(%rax) ; s-&gt;age = 1000</span><br><span class="line">        nop</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br><span class="line">buildStruct(long, long, long):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movq    %rdi, -8(%rbp) ; main 中隐性变量 ss 的地址(rbp(main) - 96)</span><br><span class="line">        movq    %rsi, -16(%rbp) ; id</span><br><span class="line">        movq    %rdx, -24(%rbp) ; score</span><br><span class="line">        movq    %rcx, -32(%rbp) ; age</span><br><span class="line">        movq    -8(%rbp), %rax</span><br><span class="line">        movq    -16(%rbp), %rdx ; id</span><br><span class="line">        movq    %rdx, (%rax)</span><br><span class="line">        movq    -8(%rbp), %rax</span><br><span class="line">        movq    -24(%rbp), %rdx  ; score</span><br><span class="line">        movq    %rdx, 8(%rax)</span><br><span class="line">        movq    -8(%rbp), %rax</span><br><span class="line">        movq    -32(%rbp), %rdx ; age</span><br><span class="line">        movq    %rdx, 16(%rax) </span><br><span class="line">        nop</span><br><span class="line">        movq    -8(%rbp), %rax ; main 中隐性变量 ss 的地址</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br><span class="line">main:</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        subq    $96, %rsp ; 分配栈空间</span><br><span class="line">        movq    $1, -32(%rbp) ; id</span><br><span class="line">        movq    $10, -24(%rbp) ; score</span><br><span class="line">        movq    $100, -16(%rbp) ; age</span><br><span class="line">        leaq    -32(%rbp), %rax ; 结构体起始地址,也就是第一个字节的内存地址</span><br><span class="line">        movq    %rax, %rdi ; 这个就类似 Java 中的 this 指针了</span><br><span class="line">        call    testStruct(Student*)</span><br><span class="line"></span><br><span class="line">        leaq    -96(%rbp), %rax ; 隐性的变量 ss 起始地址</span><br><span class="line">        movl    $33, %ecx </span><br><span class="line">        movl    $22, %edx</span><br><span class="line">        movl    $11, %esi</span><br><span class="line">        movq    %rax, %rdi ; 隐形的参数, 像不像 Java 里的 this 啊. 编译器动的手脚.</span><br><span class="line">        call    buildStruct(long, long, long)</span><br><span class="line"></span><br><span class="line">        movq    -96(%rbp), %rax ; ss.id</span><br><span class="line">        movq    -88(%rbp), %rdx ; ss.score</span><br><span class="line">        movq    %rax, -64(%rbp) </span><br><span class="line">        movq    %rdx, -56(%rbp) </span><br><span class="line">        movq    -80(%rbp), %rax ; ss.age</span><br><span class="line">        movq    %rax, -48(%rbp)</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        leave</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><blockquote><p>结构体使用的是一块连续的内存地址. 结构体指针也就是结构体第一个字节的地址.</p></blockquote><h1 id="Variable-Shadowing"><a href="#Variable-Shadowing" class="headerlink" title="Variable Shadowing"></a>Variable Shadowing</h1><blockquote><p>代码块、块级变量</p></blockquote><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C 代码"></a>C 代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_variable_shadow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 代码块开始</span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">int</span> b = a + <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 代码块结束</span></span><br><span class="line">    <span class="keyword">int</span> c = a + <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="汇编代码"><a href="#汇编代码" class="headerlink" title="汇编代码"></a>汇编代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test_variable_shadow():</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movl    $10, -4(%rbp)   ; int a = 10</span><br><span class="line">        movl    $100, -8(%rbp)  ; int a = 100</span><br><span class="line">        movl    -8(%rbp), %eax</span><br><span class="line">        addl    $1000, %eax</span><br><span class="line">        movl    %eax, -12(%rbp) ; int b = a + 1000 代码块里的 a</span><br><span class="line">        movl    -4(%rbp), %eax</span><br><span class="line">        addl    $10000, %eax    </span><br><span class="line">        movl    %eax, -16(%rbp) ; int c = a + 10000</span><br><span class="line">        nop</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><img src="/2019/06/25/asm-clang-concepts/c-variable-shadow.png"><h2 id="汇编代码分析"><a href="#汇编代码分析" class="headerlink" title="汇编代码分析"></a>汇编代码分析</h2><img src="/2019/06/25/asm-clang-concepts/variable_shadowing.png" title="块级变量隐藏"><h1 id="references"><a href="#references" class="headerlink" title="references"></a>references</h1><ol><li><a href="https://en.wikipedia.org/wiki/Pointer_(computer_programming)" target="_blank" rel="noopener">pointer</a></li><li><a href="https://stackoverflow.com/questions/29790175/assembly-x86-leave-instruction/29790275" target="_blank" rel="noopener">lea instruction</a></li><li><a href="https://aaronbloomfield.github.io/pdr/book/x86-64bit-ccc-chapter.pdf" target="_blank" rel="noopener">x86 c call convention</a></li><li><a href="https://www.cs.auckland.ac.nz/references/macvax/op-codes/Instructions/movz.html" target="_blank" rel="noopener">opcode-movz</a></li><li><a href="http://faydoc.tripod.com/cpu/movsd.htm" target="_blank" rel="noopener">movsd</a></li><li><a href="https://www.geeksforgeeks.org/pass-2d-array-parameter-c/" target="_blank" rel="noopener">pass-2d-array-parameter-c</a></li><li><a href="https://en.wikipedia.org/wiki/Variable_shadowing" target="_blank" rel="noopener">Variable Shadowing</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C 语言里的概念在 X86-64 汇编层面的分析. 汇编风格使用 AT&amp;amp;T 风格. 编译器是 gcc-x86-64-9.1&lt;/p&gt;
&lt;h1 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="asm" scheme="http://stardustman.github.io/tags/asm/"/>
    
  </entry>
  
  <entry>
    <title>asm-how-x86-64-arguments-pass</title>
    <link href="http://stardustman.github.io/2019/06/24/asm-how-x86-64-arguments-pass/"/>
    <id>http://stardustman.github.io/2019/06/24/asm-how-x86-64-arguments-pass/</id>
    <published>2019-06-24T01:52:27.000Z</published>
    <updated>2019-09-13T02:52:39.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="x86-64-下函数参数传递-汇编层面分析"><a href="#x86-64-下函数参数传递-汇编层面分析" class="headerlink" title="x86-64 下函数参数传递, 汇编层面分析"></a>x86-64 下函数参数传递, 汇编层面分析</h3><blockquote><p>To pass parameters to the subroutine, we put up to six of them into registers (in order: rdi, rsi, rdx, rcx, r8, r9). If there are more than six parameters to the subroutine, then push the rest onto the stack in reverse order (i.e. last parameter first) – since the stack grows down, the first of the extra parameters (really the seventh parameter) parameter will be stored at the lowest address (this inversion of parameters was historically used to allow functions to be passed a variable number of parameters).</p></blockquote><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="C-main"><a href="#C-main" class="headerlink" title="C main"></a>C main</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    result = testArgs(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Asm-main"><a href="#Asm-main" class="headerlink" title="Asm main"></a>Asm main</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        movl    $0, -4(%rbp) //result</span><br><span class="line">        pushq   $8 // 最后一个参数</span><br><span class="line">        pushq   $7 // 倒数第二个参数</span><br><span class="line">        movl    $6, %r9d // 第六个参数</span><br><span class="line">        movl    $5, %r8d // 第五个参数</span><br><span class="line">        movl    $4, %ecx // 第四个参数</span><br><span class="line">        movl    $3, %edx // 第三个参数</span><br><span class="line">        movl    $2, %esi // 第二个参数</span><br><span class="line">        movl    $1, %edi // 第一个参数</span><br><span class="line">        call    testArgs(long, long, long, long, long, long, long, long)</span><br><span class="line">        addq    $16, %rsp // 回收分配的栈空间</span><br><span class="line">        movl    %eax, -4(%rbp)</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        leave</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><h3 id="C-testArgs"><a href="#C-testArgs" class="headerlink" title="C testArgs"></a>C testArgs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">testArgs</span><span class="params">(<span class="keyword">long</span> a1,<span class="keyword">long</span> a2,<span class="keyword">long</span> a3,<span class="keyword">long</span> a4,<span class="keyword">long</span> a5,<span class="keyword">long</span> a6,<span class="keyword">long</span> a7,<span class="keyword">long</span> a8)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum = a1 + a2 + a3 + a4 +a5 + a6 + a7 + a8;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Asm-testArgs"><a href="#Asm-testArgs" class="headerlink" title="Asm testArgs"></a>Asm testArgs</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">testArgs(long, long, long, long, long, long, long, long):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        <span class="keyword">movq</span>    %rsp, %rbp</span><br><span class="line">        <span class="keyword">movq</span>    %rdi, -<span class="number">24</span>(%rbp)</span><br><span class="line">        <span class="keyword">movq</span>    %rsi, -<span class="number">32</span>(%rbp)</span><br><span class="line">        <span class="keyword">movq</span>    %rdx, -<span class="number">40</span>(%rbp)</span><br><span class="line">        <span class="keyword">movq</span>    %rcx, -<span class="number">48</span>(%rbp)</span><br><span class="line">        <span class="keyword">movq</span>    %r8, -<span class="number">56</span>(%rbp)</span><br><span class="line">        <span class="keyword">movq</span>    %r9, -<span class="number">64</span>(%rbp)</span><br><span class="line">        <span class="keyword">movq</span>    <span class="number">$0</span>, -<span class="number">8</span>(%rbp) // sum</span><br><span class="line">        <span class="keyword">movq</span>    -<span class="number">24</span>(%rbp), %rdx // a1</span><br><span class="line">        <span class="keyword">movq</span>    -<span class="number">32</span>(%rbp), %rax // a2</span><br><span class="line">        addq    %rax, %rdx</span><br><span class="line">        <span class="keyword">movq</span>    -<span class="number">40</span>(%rbp), %rax // a3</span><br><span class="line">        addq    %rax, %rdx</span><br><span class="line">        <span class="keyword">movq</span>    -<span class="number">48</span>(%rbp), %rax // a4</span><br><span class="line">        addq    %rax, %rdx</span><br><span class="line">        <span class="keyword">movq</span>    -<span class="number">56</span>(%rbp), %rax // a5</span><br><span class="line">        addq    %rax, %rdx</span><br><span class="line">        <span class="keyword">movq</span>    -<span class="number">64</span>(%rbp), %rax // a6</span><br><span class="line">        addq    %rax, %rdx</span><br><span class="line">        <span class="keyword">movq</span>    <span class="number">16</span>(%rbp), %rax  // a7</span><br><span class="line">        addq    %rax, %rdx</span><br><span class="line">        <span class="keyword">movq</span>    <span class="number">24</span>(%rbp), %rax  // a8</span><br><span class="line">        addq    %rdx, %rax</span><br><span class="line">        <span class="keyword">movq</span>    %rax, -<span class="number">8</span>(%rbp)</span><br><span class="line">        <span class="keyword">movq</span>    -<span class="number">8</span>(%rbp), %rax</span><br><span class="line">        popq    %rbp</span><br><span class="line">        <span class="keyword">ret</span></span><br></pre></td></tr></table></figure><h2 id="栈帧分析"><a href="#栈帧分析" class="headerlink" title="栈帧分析"></a>栈帧分析</h2><img src="/2019/06/24/asm-how-x86-64-arguments-pass/x86-64-arguments-pass.png" title="x86-64-arguments-pass"><blockquote><p>上图是执行完 testArgs 前两句汇编的栈帧状态图.<br>分析:<br>testArgs 中 movq    16(%rbp), %rax  // 将 rbp + 16 地址处的数值(a7)复制到 rax<br>rbp + 16 的原因是: 参数 a7 是 main 准备的, 属于 main 的栈帧. 16 Bytes 包括 8 Bytes 的 Return address 和 8 Bytes 的 main 的 rbp.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;x86-64-下函数参数传递-汇编层面分析&quot;&gt;&lt;a href=&quot;#x86-64-下函数参数传递-汇编层面分析&quot; class=&quot;headerlink&quot; title=&quot;x86-64 下函数参数传递, 汇编层面分析&quot;&gt;&lt;/a&gt;x86-64 下函数参数传递, 汇编层面分析
      
    
    </summary>
    
    
    
      <category term="asm" scheme="http://stardustman.github.io/tags/asm/"/>
    
  </entry>
  
  <entry>
    <title>tools-for-me</title>
    <link href="http://stardustman.github.io/2019/06/17/tools-for-me/"/>
    <id>http://stardustman.github.io/2019/06/17/tools-for-me/</id>
    <published>2019-06-17T10:37:10.000Z</published>
    <updated>2019-10-19T12:18:54.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="programming"><a href="#programming" class="headerlink" title="programming"></a>programming</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ol><li><a href="https://github.com/deathmarine/Luyten" target="_blank" rel="noopener">decompiler-Luyten</a></li><li><a href="http://www.benf.org/other/cfr/" target="_blank" rel="noopener">decompiler-cfr</a></li><li><a href="https://bytecodeviewer.com/" target="_blank" rel="noopener">byte-code-viewer</a></li></ol><h2 id="assembly"><a href="#assembly" class="headerlink" title="assembly"></a>assembly</h2><ol><li><a href="https://godbolt.org/" target="_blank" rel="noopener">godbolt</a></li></ol><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><ol><li><a href="https://c.runoob.com/front-end/53" target="_blank" rel="noopener">json-runoob</a></li><li><a href="https://www.json.cn/" target="_blank" rel="noopener">json-online</a></li></ol><h2 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h2><ol><li><a href="https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24" target="_blank" rel="noopener">regexp-jex.im</a></li><li><a href="https://regexr.com/" target="_blank" rel="noopener">regexp-regexr</a></li><li><a href="https://regexper.com/" target="_blank" rel="noopener">regexp-regexper</a></li></ol><h2 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h2><ol><li><a href="http://tool.oschina.net/hexconvert/" target="_blank" rel="noopener">hex converter</a></li><li><a href="https://www.onlinehexeditor.com/" target="_blank" rel="noopener">hex editor</a></li></ol><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><ol><li><a href="https://tool.lu/html/" target="_blank" rel="noopener">html beautify</a></li></ol><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><ol><li><a href="http://www1.tc711.com/tool/BASE64.htm" target="_blank" rel="noopener">base64</a></li></ol><h2 id="code-format"><a href="#code-format" class="headerlink" title="code format"></a>code format</h2><ol><li><a href="http://tool.oschina.net/codeformat/xml" target="_blank" rel="noopener">code format</a></li><li><a href="http://tool.chinaz.com/Tools/urlencode.aspx" target="_blank" rel="noopener">url</a></li></ol><h2 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h2><ol><li><a href="https://www.ftrain.com/unicode/" target="_blank" rel="noopener">unicode for you</a></li></ol><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><ol><li><a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a></li></ol><h1 id="working"><a href="#working" class="headerlink" title="working"></a>working</h1><h2 id="pc"><a href="#pc" class="headerlink" title="pc"></a>pc</h2><ol><li><a href="https://www.snipaste.com/" target="_blank" rel="noopener">sinp &amp; paste</a></li><li><a href="https://mubu.com/" target="_blank" rel="noopener">mubu</a></li><li><a href="https://www.processon.com" target="_blank" rel="noopener">process on</a></li><li><a href="https://www.apowersoft.cn/free-online-screen-recorder" target="_blank" rel="noopener">screen-recorder</a></li></ol><h1 id="reinstall-os"><a href="#reinstall-os" class="headerlink" title="reinstall os"></a>reinstall os</h1><ol><li><a href="http://multibootusb.org/page_download/" target="_blank" rel="noopener">multibootusb</a></li><li><a href="https://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/" target="_blank" rel="noopener">universal usb installer</a></li></ol><h1 id="entertainment"><a href="#entertainment" class="headerlink" title="entertainment"></a>entertainment</h1><h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><h3 id="online"><a href="#online" class="headerlink" title="online"></a>online</h3><ol><li><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">downloader-you-get</a></li><li><a href="https://motrix.app/" target="_blank" rel="noopener">downloader-motrix</a></li></ol><h3 id="baidu"><a href="#baidu" class="headerlink" title="baidu"></a>baidu</h3><ol><li><a href="https://www.baiduwp.com/" target="_blank" rel="noopener">baiduwp</a></li><li><a href="http://pandownload.com/index.html" target="_blank" rel="noopener">pandownload</a></li><li><a href="https://xdown.org/" target="_blank" rel="noopener">Xdown</a></li></ol><h3 id="converter"><a href="#converter" class="headerlink" title="converter"></a>converter</h3><ol><li><a href="https://online-audio-converter.com/" target="_blank" rel="noopener">audio-converter</a></li></ol><h2 id="movie"><a href="#movie" class="headerlink" title="movie"></a>movie</h2><ol><li><a href="https://www.cupfox.com/" target="_blank" rel="noopener">cupfox</a></li><li><a href="http://www.bt177.tel/" target="_blank" rel="noopener">bt-177.tel</a></li><li><a href="http://www.yyetss.com/" target="_blank" rel="noopener">renren</a></li></ol><h2 id="picture"><a href="#picture" class="headerlink" title="picture"></a>picture</h2><ol><li><a href="http://waifu2x.udp.jp/" target="_blank" rel="noopener">waifu2x</a></li><li><a href="https://www.awanqi.com/" target="_blank" rel="noopener">papers-anwanqi</a></li><li><a href="http://ilovepapers.com/" target="_blank" rel="noopener">ilovepapers</a></li></ol><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><ol><li><a href="https://www.ilovepdf.com" target="_blank" rel="noopener">ilovepdf</a></li><li><a href="https://html2pdf.com/" target="_blank" rel="noopener">html to pdf</a></li></ol><h2 id="typing"><a href="#typing" class="headerlink" title="typing"></a>typing</h2><ol><li><a href="https://dazi.kukuw.com/" target="_blank" rel="noopener">practice typing</a></li></ol><h1 id="job"><a href="#job" class="headerlink" title="job"></a>job</h1><h2 id="company"><a href="#company" class="headerlink" title="company"></a>company</h2><ol><li><a href="https://www.tianyancha.com/" target="_blank" rel="noopener">tianyancha</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;programming&quot;&gt;&lt;a href=&quot;#programming&quot; class=&quot;headerlink&quot; title=&quot;programming&quot;&gt;&lt;/a&gt;programming&lt;/h1&gt;&lt;h2 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="tools" scheme="http://stardustman.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>master-ip</title>
    <link href="http://stardustman.github.io/2019/06/04/master-ip/"/>
    <id>http://stardustman.github.io/2019/06/04/master-ip/</id>
    <published>2019-06-04T07:32:28.000Z</published>
    <updated>2019-06-11T06:59:05.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>  The Internet Protocol is designed for use in interconnected systems of <strong>packet-switched</strong> computer communication networks.  Such a system has been called a “catenet”.  The internet protocol provides for transmitting blocks of data called datagrams from sources to destinations, where sources and destinations are hosts identified by <strong>fixed length addresses</strong>.  The internet protocol also provides for <strong>fragmentation</strong> and <strong>reassembly</strong> of long datagrams, if necessary, for transmission through “small packet” networks.</p><blockquote><p>IPv4 is a connectionless protocol for use on packet-switched networks. It operates on a best effort delivery model, in that it does not guarantee delivery, nor does it assure proper sequencing or avoidance of duplicate delivery. These aspects, including data integrity, are addressed by an upper layer transport protocol, such as the Transmission Control Protocol (TCP).</p></blockquote><h1 id="IP-header-format"><a href="#IP-header-format" class="headerlink" title="IP header format"></a>IP header format</h1>  <img src="/2019/06/04/master-ip/ip-header-format.png" title="ip-header-format"><h1 id="Ip-datagram"><a href="#Ip-datagram" class="headerlink" title="Ip datagram"></a>Ip datagram</h1>  <img src="/2019/06/04/master-ip/ip-format.png" title="ip-format"><h1 id="IPV4-example"><a href="#IPV4-example" class="headerlink" title="IPV4 example"></a>IPV4 example</h1>  <img src="/2019/06/04/master-ip/ip-capture-wireshark.jpg" title="ip-capture-wireshark">  <img src="/2019/06/04/master-ip/ip-capture-wireshark-example.png" title="ip-capture-wireshark-example"><h2 id="version-4-bits"><a href="#version-4-bits" class="headerlink" title="version(4 bits)"></a>version(4 bits)</h2><p>0x4(4)</p><h2 id="Header-Length-4-bits"><a href="#Header-Length-4-bits" class="headerlink" title="Header Length(4 bits)"></a>Header Length(4 bits)</h2><p>0x5(5)</p><h2 id="Type-Of-Service-TOS-8-bits"><a href="#Type-Of-Service-TOS-8-bits" class="headerlink" title="Type Of Service(TOS)(8 bits)"></a>Type Of Service(TOS)(8 bits)</h2><p>0x00(0)</p><h2 id="Total-Length-16-bits"><a href="#Total-Length-16-bits" class="headerlink" title="Total Length(16 bits)"></a>Total Length(16 bits)</h2><p>0x28(40)</p><h2 id="Identification-16-bits"><a href="#Identification-16-bits" class="headerlink" title="Identification(16 bits)"></a>Identification(16 bits)</h2><p>0xd279</p><h2 id="Flags-3-bits"><a href="#Flags-3-bits" class="headerlink" title="Flags(3 bits)"></a>Flags(3 bits)</h2><p>0x4 0100</p><ol><li>0 Reserved bit not set</li><li>1 Don’t fragment set</li><li>0 More fragments not set</li></ol><h2 id="Fragment-Offset-13-bits"><a href="#Fragment-Offset-13-bits" class="headerlink" title="Fragment Offset(13 bits)"></a>Fragment Offset(13 bits)</h2><blockquote><p>This field indicates where in the datagram this fragment belongs.<br>The fragment offset is measured in units of 8 octets (64 bits). The<br>first fragment has offset zero.</p></blockquote><p>0x000 (0000 0000 0000)</p><h2 id="Time-to-Live-TTL-8-bits"><a href="#Time-to-Live-TTL-8-bits" class="headerlink" title="Time to Live(TTL)(8 bits)"></a>Time to Live(TTL)(8 bits)</h2><p>0x80 TTL:(128)</p><h2 id="Protocal-8-bits"><a href="#Protocal-8-bits" class="headerlink" title="Protocal(8 bits)"></a>Protocal(8 bits)</h2><p>0x06 TCP:(6)</p><h2 id="Header-Checksum-16-bits"><a href="#Header-Checksum-16-bits" class="headerlink" title="Header Checksum(16 bits)"></a>Header Checksum(16 bits)</h2><p>0x2e35</p><h2 id="Source-IP-Address-32-bits"><a href="#Source-IP-Address-32-bits" class="headerlink" title="Source IP Address(32 bits)"></a>Source IP Address(32 bits)</h2><p>0x 0a:fe:c9:ad -&gt; 10.254.201.173</p><h2 id="Destination-IP-Address-32-bits"><a href="#Destination-IP-Address-32-bits" class="headerlink" title="Destination IP Address(32 bits)"></a>Destination IP Address(32 bits)</h2><p>0x ac:10:79:65 -&gt; 172.16.121.101</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="http://user.it.uu.se/~rmg/teaching/IP.pdf" target="_blank" rel="noopener">ip fragmentation and reassembly</a></li><li><a href="https://en.m.wikipedia.org/wiki/IPv4#Fragmentation_and_reassembly" target="_blank" rel="noopener">fragmentation &amp; reassembly</a></li><li><a href="https://mp.weixin.qq.com/s/ifZk5Ox9cnixq1ZxgwFBSw" target="_blank" rel="noopener">ip 重组</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h1&gt;&lt;p&gt;  The Internet Protocol is designed fo
      
    
    </summary>
    
    
    
      <category term="network" scheme="http://stardustman.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>linux-kernel-analysis-2</title>
    <link href="http://stardustman.github.io/2019/05/31/linux-kernel-analysis-2/"/>
    <id>http://stardustman.github.io/2019/05/31/linux-kernel-analysis-2/</id>
    <published>2019-05-31T01:35:37.000Z</published>
    <updated>2019-05-31T02:24:41.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据连续存储和选择读取"><a href="#数据连续存储和选择读取" class="headerlink" title="数据连续存储和选择读取"></a>数据连续存储和选择读取</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据连续存储和选择读取&quot;&gt;&lt;a href=&quot;#数据连续存储和选择读取&quot; class=&quot;headerlink&quot; title=&quot;数据连续存储和选择读取&quot;&gt;&lt;/a&gt;数据连续存储和选择读取&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://stardustman.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>asm-how-x86-function-execute</title>
    <link href="http://stardustman.github.io/2019/05/28/asm-how-x86-function-execute/"/>
    <id>http://stardustman.github.io/2019/05/28/asm-how-x86-function-execute/</id>
    <published>2019-05-28T11:32:16.000Z</published>
    <updated>2019-09-27T09:08:15.961Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前一阵子去看 java 虚拟机原理, 忽然痛悟到虚拟机也是机器啊, 呵呵也就是个软件而已. 看到 java 方法调用太复杂. 字节码那一套又不太熟悉, 还不如直接去看 C 编译后的汇编代码.<br>目的: 搞明白 X86 架构下函数到底是怎么调用执行的.</p></blockquote><h1 id="assembly-syntax-for-X86"><a href="#assembly-syntax-for-X86" class="headerlink" title="assembly syntax for X86"></a>assembly syntax for X86</h1><h2 id="gas-gnu-assembler-syntax-也就是-AT-amp-T-风格"><a href="#gas-gnu-assembler-syntax-也就是-AT-amp-T-风格" class="headerlink" title="gas (gnu assembler syntax), 也就是 AT&amp;T 风格."></a>gas (gnu assembler syntax), 也就是 AT&amp;T 风格.</h2><p>本文采用该风格.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">swap(<span class="keyword">int</span>, <span class="keyword">int</span>):</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movl    %edi, <span class="number">-20</span>(%rbp)</span><br><span class="line">        movl    %esi, <span class="number">-24</span>(%rbp)</span><br><span class="line">        movl    <span class="number">-20</span>(%rbp), %eax</span><br><span class="line">        movl    %eax, <span class="number">-4</span>(%rbp)</span><br><span class="line">        movl    <span class="number">-24</span>(%rbp), %eax</span><br><span class="line">        movl    %eax, <span class="number">-20</span>(%rbp)</span><br><span class="line">        movl    <span class="number">-4</span>(%rbp), %eax</span><br><span class="line">        movl    %eax, <span class="number">-24</span>(%rbp)</span><br><span class="line">        nop</span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><h2 id="intel-syntax"><a href="#intel-syntax" class="headerlink" title="intel syntax"></a>intel syntax</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">swap(<span class="keyword">int</span>, <span class="keyword">int</span>):</span><br><span class="line">        <span class="keyword">push</span>    <span class="built_in">rbp</span></span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">rbp</span>, <span class="built_in">rsp</span></span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">20</span>], <span class="built_in">edi</span></span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">24</span>], <span class="built_in">esi</span></span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">20</span>]</span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">4</span>], <span class="built_in">eax</span></span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">24</span>]</span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">20</span>], <span class="built_in">eax</span></span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">mov</span>     <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">24</span>], <span class="built_in">eax</span></span><br><span class="line">        <span class="keyword">nop</span></span><br><span class="line">        <span class="keyword">pop</span>     <span class="built_in">rbp</span></span><br><span class="line">        <span class="keyword">ret</span></span><br></pre></td></tr></table></figure><h1 id="instruction-suffixes"><a href="#instruction-suffixes" class="headerlink" title="instruction suffixes"></a>instruction suffixes</h1><table><thead><tr><th>缩写</th><th>全称</th><th>位数</th></tr></thead><tbody><tr><td>b</td><td>byte</td><td>8bit</td></tr><tr><td>w</td><td>word</td><td>16bit</td></tr><tr><td>l</td><td>long</td><td>32bit</td></tr><tr><td>q</td><td>quad</td><td>64bit</td></tr></tbody></table><h1 id="addressing-mode"><a href="#addressing-mode" class="headerlink" title="addressing mode"></a>addressing mode</h1><blockquote><p>CPU 寻址方式, 也就是拿到数据的方式.</p></blockquote><h2 id="direct-addressing"><a href="#direct-addressing" class="headerlink" title="direct addressing"></a>direct addressing</h2><blockquote><p>movb $0x05,%al<br>表示为:R[al] = 0x05;<br>将立即数 0x05(1 byte) 复制到寄存器 al</p></blockquote><h2 id="indirect-addressing"><a href="#indirect-addressing" class="headerlink" title="indirect addressing"></a>indirect addressing</h2><blockquote><p>间接寻址也就是到内存里去找</p></blockquote><h3 id="register-to-memory"><a href="#register-to-memory" class="headerlink" title="register to memory"></a>register to memory</h3><blockquote><p>movl %eax, -4(%ebp)<br>表示为: mem[R[ebp]-4] = R[eax];<br>将寄存器 eax 里面的值复制到寄存器 ebp 的值减去 4 指向的内存地址处(也就是 R[ebp] -4 的值是一个内存地址).<br>通过寄存器指向了内存地址, 是不是很熟悉的指针啊, 对, 就是指针. C 语言的指针就是这么玩的啊!</p></blockquote><h3 id="memory-to-register"><a href="#memory-to-register" class="headerlink" title="memory to register"></a>memory to register</h3><blockquote><p>movl -4(%ebp)<br>%eax 表示为: R[eax] = mem[R[ebp] -4];<br>将寄存器 esp 的值减去 4 的值指向的内存地址处存放的值, 复制到寄存器 eax</p></blockquote><h1 id="program-counter-for-stored-program"><a href="#program-counter-for-stored-program" class="headerlink" title="program counter for stored program"></a>program counter for stored program</h1><blockquote><p>PC = PC + (instruction size in bytes)<br>(instruction) (src1) (src2) (dst)<br>In most processors, the PC is incremented after fetching an instruction,<br>and holds the memory address of (“points to”) the next instruction that would be executed.<br>这里就用到了指令周期(instruction cycle)这个概念了, fetch, decode, execute.<br>注意到 PC 这个寄存器, 在 CPU fetch 了一条指令后就自动增加了.<br>(In a processor where the incrementation precedes the fetch, the PC points to the current instruction being executed.)<br>同样的在 CPU fetch 一条指令之前, PC 指向当前正在执行的指令.<br>注意: 不允许直接操作 ip(instruction pointer) 也叫 pc(program counter) 这个寄存器, 如果这个能被编译器操作的话, 就完全想跳到哪执行就跳到哪执行了. 实际上 call 和 ret 指令就是在间接操作这两个寄存器. call 带来的效果之一就是 push %rip, ret 带来的效果之一就是 pop %rip. 两者具有对称作用啊!</p></blockquote><h1 id="change-control-flow"><a href="#change-control-flow" class="headerlink" title="change control flow"></a>change control flow</h1><h2 id="jmp-label"><a href="#jmp-label" class="headerlink" title="jmp label"></a>jmp label</h2><blockquote><p>When a jump instruction executes (in the last step of the machine cycle), it puts a new address into the PC. Now the fetch at the top of the next machine cycle fetches the instruction at that new address. Instead of executing the instruction that follows the jump instruction in memory, the processor “jumps” to an instruction somewhere else in memory.<br>jmp 指令把 label 所在的地址, 复制给 pc 寄存器. 这就改变了程序的控制流. 然后程序流程就脱离了原来的执行流. 和 call label 很相似, 对, call指令作用之一就包括了一个隐式的 jmp label. 函数调用也就是把控制权交给了被调用者. 但是控制权要回到调用函数那里. 只不过 call 指令在函数交出控制权之前还多干了一件事, 就是把此时的 pc 值 push 到了栈里. </p></blockquote><h1 id="stack-management"><a href="#stack-management" class="headerlink" title="stack management"></a>stack management</h1><h2 id="stack-pointer"><a href="#stack-pointer" class="headerlink" title="stack pointer"></a>stack pointer</h2><blockquote><p>A stack register is a computer central processor register whose purpose is to keep track of a call stack.<br>push pop 指令操作的是 sp(stack pointer) 这个寄存器.<br>栈底地址: 由bp(base pointer) 保存<br>栈分配空间: sp 减去需要的地址空间大小(所谓的栈向下生长);<br>栈回收空间: sp 加上需要的地址空间大小(所谓的栈向上收缩);(PS: 相当无聊的话)</p></blockquote><img src="/2019/05/28/asm-how-x86-function-execute/x86-64-stack.png" title="x86-64-stack"><h2 id="pushl-eax"><a href="#pushl-eax" class="headerlink" title="pushl %eax"></a>pushl %eax</h2><blockquote><p>push value of %eax onto stack<br>The push instruction places its operand onto the top of the hardware supported stack in memory. Specifically, push first decrements ESP by 4, then places its operand into the contents of the 32-bit location at address [ESP]. ESP (the stack pointer) is decremented by push since the x86 stack grows down - i.e. the stack grows from high addresses to lower addresses.<br>这里可以看到 push 的是多字节的数据, 那就涉及到怎样排列多字节数据的问题了. 也就是所谓的字节序的问题. X86 采用所谓的小端, 也就是把数字按照顺序放到栈里, 数字的高位放在了比较大的内存地址那里.(这里不做讨论)<br>等价于</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subl $4, %esp //分配4个字节的空间, 所谓的栈向下生长</span><br><span class="line">movl %eax, (%esp) //将 eax 的值复制到 esp 指到的内存地址处</span><br></pre></td></tr></table></figure><h2 id="popl-eax"><a href="#popl-eax" class="headerlink" title="popl %eax"></a>popl %eax</h2><blockquote><p>pop %eax off stack<br>The pop instruction removes the 4-byte data element from the top of the hardware-supported stack into the specified operand (i.e. register or memory location). It first moves the 4 bytes located at memory location [ESP] into the specified register or memory location, and then increments SP by 4.<br>等价于</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl (%esp),%eax //将 esp 指向的内存地址里面的值复制到 eax</span><br><span class="line">addl $4,%esp //回收空间</span><br></pre></td></tr></table></figure><h1 id="function-call-and-return"><a href="#function-call-and-return" class="headerlink" title="function call and return"></a>function call and return</h1><h2 id="call"><a href="#call" class="headerlink" title="call "></a>call <label></label></h2><blockquote><p>The call instruction first pushes the current code location onto the hardware supported stack in memory(see the push instruction for details), and then performs an unconditional jump to the code location indicated by the label operand. Unlike the simple jump instructions, the call instruction saves the location to return to when the subroutine completes.<br>注意到 CPU 在 fetch 到 call 指令后, PC 就已经自动加 1 了. 此时的 PC 值也就是所谓的函数返回地址. call 指令做了两件事, 第一件事: 将此时的 ip 保存到栈中, 第二件事: jump 到 label 位置, 此时已经改变了 PC 的值.<br>call label 作用等价于:<br>pushq %rip<br>jmp label</p></blockquote><h2 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h2><blockquote><p>The ret instruction implements a subroutine return mechanism. This instruction first pops a code location off the hardware supported in-memory stack (也就是 call 指令压入栈中的 PC, 将这个值复制到 PC 寄存器)(see the pop instruction for details). It then performs an unconditional jump to the retrieved code location.<br>所以啊, call(含有一个 push 操作) 和 ret(含有一个 pop 操作) 指令, 这是实现控制流跳转和恢复的关键. 也间接操作了 sp 这个寄存器. 硬件实现的功能, 不需要过多的计较.<br>ret 作用等价于:<br>popq %rip</p></blockquote><h1 id="call-stack"><a href="#call-stack" class="headerlink" title="call stack"></a>call stack</h1><blockquote><p>In computer science, a call stack is a stack data structure that stores information about the active subroutines of a computer program. This kind of stack is also known as an execution stack, program stack, control stack, run-time stack, or machine stack, and is often shortened to just “the stack”.<br>A call stack is used for several related purposes, but the main reason for having one is to keep track of the point to which each active subroutine should return control when it finishes executing.<br>An active subroutine is one that has been called but is yet to complete execution after which control should be handed back to the point of call. Such activations of subroutines may be nested to any level (recursive as a special case), hence the stack structure.</p></blockquote><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><blockquote><p>for example, a subroutine DrawSquare calls a subroutine DrawLine from four different places, DrawLine must know where to return when its execution completes. To accomplish this, the address following the instruction that jumps to DrawLine, the return address, is pushed onto the call stack with each call.</p></blockquote><img src="/2019/05/28/asm-how-x86-function-execute/callstack-layout-for-upward-growing-stacks.png" title="callstack-layout-for-upward-growing-stacks"><h1 id="code-analysis"><a href="#code-analysis" class="headerlink" title="code analysis"></a>code analysis</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 64 bit 机器 , AT&amp;T 风格的汇编</span><br><span class="line">swap(int, int):</span><br><span class="line">        pushq   %rbp // 上一个栈帧(main)的基地址压栈 等价于 subq $8, %rsp; movq %rbp,(%rsp)</span><br><span class="line">        movq    %rsp, %rbp // 开辟新的函数栈帧, 也就是形成一个新的栈的基地址</span><br><span class="line">        movl    %edi, -20(%rbp) // 参数 a</span><br><span class="line">        movl    %esi, -24(%rbp) // 参数 b</span><br><span class="line">        movl    -20(%rbp), %eax // 把 a 赋值给 %eax</span><br><span class="line">        movl    %eax, -4(%rbp)  // 把 %eax (a)赋值给 %rbp - 4(a) 的地址处</span><br><span class="line">        movl    -24(%rbp), %eax // 把 b 赋值给 % eax（b）</span><br><span class="line">        movl    %eax, -20(%rbp) // 把 %eax (b) 赋值给 %rbp - 20（b） 的地址处,完成 b 的交换</span><br><span class="line">        movl    -4(%rbp), %eax  // 把 %rbp - 4 地址处的值(a) 赋值给 %eax (a)</span><br><span class="line">        movl    %eax, -24(%rbp) // 把 %eax (a) 赋值给 %rbp - 24 的地址处, 完成 a 的交换</span><br><span class="line">        nop // 延时</span><br><span class="line">        popq    %rbp // 等价于 movq (%rsp), %rbp ; 上一个函数栈帧(main)的基地址恢复; addq $8, %rsp ; 上一个函数的 %rsp 恢复</span><br><span class="line">        ret // 1. popq %rip. (恢复 main 的 pc, call swap 这条指令压入的 pc ) 2. jmp % rip 处继续执行.(也就是 movl $0, %eax 这条指令的地址)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    swap(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        movl    $2, %esi // 由 caller 准备函数参数 2</span><br><span class="line">        movl    $1, %edi // 由 caller 准备函数参数 1</span><br><span class="line">        call    swap // 在 CPU fetch 了 call 指令后, pc 已经指向了下一条指令, 也就是 movl $0, %eax 这条指令. 此时的 call 指令完成了两件事, 第一件事: 将 pc(old) 压入到栈中(swap 函数 ret 指令(函数返回)就是把这个 pc(old) pop 到 pc 这个寄存器, CPU 就能接着执行 movl $0, %eax 这条指令了), 第二件事: jump 到swap的地址, 开始执行swap的代码.</span><br><span class="line">        movl    $0, %eax // 返回值 0 </span><br><span class="line">        popq    %rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><h1 id="C-compare-to-Assembly"><a href="#C-compare-to-Assembly" class="headerlink" title="C compare to  Assembly"></a>C compare to  Assembly</h1><img src="/2019/05/28/asm-how-x86-function-execute/c-swap-to-asm-swap.png" title="C code VS asm code"><h1 id="asm-execute-graph"><a href="#asm-execute-graph" class="headerlink" title="asm execute graph"></a>asm execute graph</h1><img src="/2019/05/28/asm-how-x86-function-execute/asm-execute-graph.png" title="asm execute graph"><blockquote><p>注意: 示意图里面的是 64 bit 的汇编代码.<br>注意: 所有的 push 和 pop 指令都会改变 sp 寄存器的值.<br>图1 main 函数执行完 pushq %rbp 和 movq %rsp, %rbp, 开辟 main 函数的栈帧.<br>图2 main 函数执行 call swap. call 指令两个作用: 1. 将 movl $0, %eax 这条指令的地址(X)压入栈中. 2. jump 到 swap 的地址.<br>图3 是 swap 函数的栈帧, 此时新函数的栈帧 rsp 和 rbp 指向的是相同的内存地址.<br>图4 所有的 mov 使用的内存地址, 都是通过 rbp 来偏移得到, rbp 的值并没有发生改变.<br>图5 执行完 popq %rsp, 恢复 main 函数的栈基址(rbp), 也就是和图1 一样.<br>图6 执行完 ret 恢复为 main 函数的栈帧(这里主要是 rsp, rbp, pc, 个人理解把 pc 视为栈帧的一部分, 因为函数调用控制权发生转移, 幕后也离不开 pc 这个寄存器的变化). ret 的作用等价于 popq %rip. 但是无法直接操作 ip(pc) 这个寄存器. 也就相当于间接改变 ip. 此时 pc 已被 ret 指令恢复成了 X. (此时实际上已经控制权已经回到 main 函数了), 接下来就是继续执行 main 函数的代码. 其实 swap 函数的栈帧已经被销毁了. 也就是再也访问不到 swap 函数里的变量了. 这就是 C 语言里的所谓的本地变量的本质.<br>注意: 图1 和 图6 , 图2 和 图5 完全一样, 这不是有意为之, 按照 X86 的函数调用机制就是这样的. 在被调用函数(swap)执行 popq % rbp, 这条指令就是要恢复调用函数(main)的 rbp, 执行 ret 这条指令就是要恢复调用函数(main)的下一条指令的地址. 也就是将 pc 的值恢复为 X, 这样就可以接着执行了嘛. 也就是所谓的恢复调用者(main)的栈帧. 也就是 main 函数调用 swap 函数(call 指令)保留 main 的状态(也就是 main 函数的 rbp 和 pc), swap 执行到最后(popq, ret)负责恢复现场(也就是恢复 main 函数的 rbp 和 pc). call 和 ret 指令的也分别有 push %rip 和 pop %rip 的作用. 很对称的操作!</p></blockquote><h1 id="bombs"><a href="#bombs" class="headerlink" title="bombs"></a>bombs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pushq   %rbp  ; 保留上一个函数(也就是调用者)的栈基址</span><br><span class="line">movq    %rsp, %rbp ; 新函数的栈基址. 一个新的栈帧 sp 和 bp 指向的是同一个地址</span><br></pre></td></tr></table></figure><blockquote><p>一个所谓的栈帧(stack frame)就是由 sp(stack pointer) 和 bp(base pointer) 这两个寄存器来维护的.<br>这两句会出现在每一个函数的开始, 那么问题来了 main 函数里面保留的是哪一个调用函数的栈基址呢? 个人推测, 不一定正确, 我们知道创建进程(线程)是 OS 内核的功能, 当然进程销毁也是内核的功能. 内核同样维护着属于内核空间的栈帧, 当进程创建完毕后, 我们写的 C 代码应该是被内核里的函数调用的, 这样的话 main 里面 pushq %rbp 应该是保留的内核函数的栈基址. 这样 main 的 ret 返回后就能接着执行内核函数里面的逻辑了. (估计也就是销毁进程一系列操作了, 这样才能把分配的资源收回来啊!)</p></blockquote><h1 id="references"><a href="#references" class="headerlink" title="references"></a>references</h1><ol><li><a href="https://en.wikipedia.org/wiki/Program_counter" target="_blank" rel="noopener">program counter</a></li><li><a href="http://cseweb.ucsd.edu/classes/sp10/cse141/pdf/02/S01_x86_64.key.pdf" target="_blank" rel="noopener">A reader’s guide to x86 assembly</a></li><li><a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html" target="_blank" rel="noopener">x86 guide</a></li><li><a href="https://en.wikipedia.org/wiki/Instruction_cycle" target="_blank" rel="noopener">instruction cycle</a></li><li><a href="http://chortle.ccsu.edu/assemblytutorial/Chapter-17/ass17_2.html" target="_blank" rel="noopener">how jump work</a></li><li><a href="https://en.wikipedia.org/wiki/Stack_register" target="_blank" rel="noopener">stack pointer</a></li><li><a href="https://en.wikipedia.org/wiki/Call_stack" target="_blank" rel="noopener">call stack</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前一阵子去看 java 虚拟机原理, 忽然痛悟到虚拟机也是机器啊, 呵呵也就是个软件而已. 看到 java 方法调用太复杂. 字节码那一套又不太熟悉, 还不如直接去看 C 编译后的汇编代码.&lt;br&gt;目的: 搞明白 X86 架构下函数到底是怎么调用执
      
    
    </summary>
    
    
    
      <category term="asm" scheme="http://stardustman.github.io/tags/asm/"/>
    
  </entry>
  
  <entry>
    <title>linux-kernel-analysis-1</title>
    <link href="http://stardustman.github.io/2019/05/28/linux-kernel-analysis-1/"/>
    <id>http://stardustman.github.io/2019/05/28/linux-kernel-analysis-1/</id>
    <published>2019-05-28T04:25:46.000Z</published>
    <updated>2019-05-28T08:03:23.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h1><p>机制与策略分离<br>机制 – 提供什么样的功能<br>策略 – 如何使用这些功能</p><blockquote><p>说实在的这句话第一次听到还是挺震撼的, 一时觉得大学里的操作系统都不知道在干嘛, 我们学的就是机制, 比如进程创建功能, 进程创建完成后具体如何使用与OS内核不再有关. 文件创建功能, 文件创建完,如何使用交给用户. 其实很类似编程中的接口, 接口定义功能, 实现负责具体的策略.</p></blockquote><h1 id="内核类型"><a href="#内核类型" class="headerlink" title="内核类型"></a>内核类型</h1><ol><li>单内核 (Linux)<blockquote><p>可加载的 Linux 内核模块, 提高维护性.</p></blockquote></li><li>微内核 </li></ol><h1 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h1><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span> , *<span class="title">prev</span></span></span><br><span class="line"><span class="class">&#125;;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个结构很有意思, 改变两个指针的含义, 会发现几乎描述了很多数据结构.<br>只有一个 *next, 单链表, 只进行头部插入数据-栈, 只进行尾部插入数据-队列<br>*left, *right </p></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">define <span class="title">LIST_HEAD_INIT</span><span class="params">(name)</span></span>&#123;&amp;name, &amp;name&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前后指针都指向自己</p></blockquote><h3 id="声明并初始化"><a href="#声明并初始化" class="headerlink" title="声明并初始化"></a>声明并初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">define <span class="title">LIST_HEAD</span><span class="params">(name)</span> struct <span class="title">list_head</span><span class="params">(name)</span></span>&#123;LIST_HEAD_INIT(name)&#125;</span><br></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">list_empty</span><span class="params">(<span class="keyword">const</span> struct list_head*head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next == head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> _ _list_add(struct list_head*<span class="keyword">new</span>,struct list_head*prev,struct_head*next)&#123;</span><br><span class="line">    next-&gt;prev = <span class="keyword">new</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;next = next;</span><br><span class="line">    <span class="keyword">new</span>-&gt;prev = prev;</span><br><span class="line">    prev-&gt;next = <span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>static 该函数作用域仅在本文件内, 可以隐藏信息<br>inline 编译器展开该函数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> _ _list_add_tail(struct list_head*<span class="keyword">new</span>,struct list_head*head)&#123;</span><br><span class="line">    _ _list_add(<span class="keyword">new</span>,head-&gt;prev,head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计理念&quot;&gt;&lt;a href=&quot;#设计理念&quot; class=&quot;headerlink&quot; title=&quot;设计理念&quot;&gt;&lt;/a&gt;设计理念&lt;/h1&gt;&lt;p&gt;机制与策略分离&lt;br&gt;机制 – 提供什么样的功能&lt;br&gt;策略 – 如何使用这些功能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
      <category term="linux-analysis" scheme="http://stardustman.github.io/tags/linux-analysis/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu18.04-install-openjdk8</title>
    <link href="http://stardustman.github.io/2019/05/25/ubuntu18-04-install-openjdk8/"/>
    <id>http://stardustman.github.io/2019/05/25/ubuntu18-04-install-openjdk8/</id>
    <published>2019-05-25T06:33:35.000Z</published>
    <updated>2019-05-29T01:13:50.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加openjdk8的第三方源"><a href="#添加openjdk8的第三方源" class="headerlink" title="添加openjdk8的第三方源"></a>添加openjdk8的第三方源</h1><blockquote><p>sudo add-apt-repository ppa:openjdk-r/ppa<br>ppa (Personal Package Achives)</p></blockquote><h1 id="执行更新"><a href="#执行更新" class="headerlink" title="执行更新"></a>执行更新</h1><blockquote><p>apt-get update</p></blockquote><h1 id="安装openjdk8"><a href="#安装openjdk8" class="headerlink" title="安装openjdk8"></a>安装openjdk8</h1><blockquote><p>sudo apt-get install openjdk-8-jdk</p></blockquote><h1 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h1><blockquote><p>sudo update-alternatives  - -config java</p></blockquote><h1 id="确认安装成功"><a href="#确认安装成功" class="headerlink" title="确认安装成功"></a>确认安装成功</h1><blockquote><p>java -version</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;添加openjdk8的第三方源&quot;&gt;&lt;a href=&quot;#添加openjdk8的第三方源&quot; class=&quot;headerlink&quot; title=&quot;添加openjdk8的第三方源&quot;&gt;&lt;/a&gt;添加openjdk8的第三方源&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;sudo 
      
    
    </summary>
    
    
    
      <category term="openjdk" scheme="http://stardustman.github.io/tags/openjdk/"/>
    
  </entry>
  
  <entry>
    <title>master-tcp</title>
    <link href="http://stardustman.github.io/2019/05/22/master-tcp/"/>
    <id>http://stardustman.github.io/2019/05/22/master-tcp/</id>
    <published>2019-05-22T01:18:08.000Z</published>
    <updated>2019-05-24T02:38:54.049Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The Transmission Control Protocol (TCP) is intended for use as a highly<br>reliable <strong>host-to-host</strong> protocol between hosts in <strong>packet-switched</strong> computer communication networks, and in interconnected systems of such networks.</p></blockquote><h1 id="TCP-header-format"><a href="#TCP-header-format" class="headerlink" title="TCP header format"></a>TCP header format</h1><p><img src="/images/master-tcp-tcp-header.png" alt="tcp header"></p><h2 id="basic-data-transfer"><a href="#basic-data-transfer" class="headerlink" title="basic data transfer"></a>basic data transfer</h2><h2 id="reliability"><a href="#reliability" class="headerlink" title="reliability"></a>reliability</h2><ul><li>sequence number</li><li>acknowledgement</li></ul><h2 id="flow-control"><a href="#flow-control" class="headerlink" title="flow control"></a>flow control</h2><ul><li>window size</li></ul><h2 id="multiplexing"><a href="#multiplexing" class="headerlink" title="multiplexing"></a>multiplexing</h2><ul><li>socket (ip, port)</li></ul><h2 id="connections"><a href="#connections" class="headerlink" title="connections"></a>connections</h2><blockquote><p>Each connection is uniquely specified by a <strong>pair</strong> of sockets identifying its two sides.(source ip, source port),(destination ip, destination port)</p></blockquote><ul><li>sockets</li><li>sequence numbers</li><li>window size</li></ul><h1 id="TCP-建立连接目的"><a href="#TCP-建立连接目的" class="headerlink" title="TCP 建立连接目的"></a>TCP 建立连接目的</h1><blockquote><p>交换通信双方的 ISN (Initial Sequence Number)<br>凡是占据序列号的任何TCP报文，一定对方确认，如果没有收到确认，会一直重传，直到达到规定的上限次数。<br>syn , data , fin 占据 sequence number 需要确认. ack 不占据 sequence number 不需要确认.</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MDMwOTcwMg==&mid=2650005578&idx=1&sn=9e4ba700512e68e2dcbd54bfe11bd669&chksm=87398263b04e0b7577be99e43c272147b74030514df3f78b894c5b5cee21a3565cf3e4ceebeb&scene=21#wechat_redirect" target="_blank" rel="noopener">TCP three way handshake 1</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MDMwOTcwMg==&mid=2650005835&idx=1&sn=dd0104635b5510ab6bf4f34ec347fe57&chksm=87398362b04e0a7402a6075b46e9a62855a78408a6dfecf6f7d13d8ae5e0375fab6d84208159&scene=21#wechat_redirect" target="_blank" rel="noopener">TCP three way handshake 2</a></li><li><a href="https://tools.ietf.org/html/rfc793" target="_blank" rel="noopener">rfc793</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;The Transmission Control Protocol (TCP) is intended for use as a highly&lt;br&gt;reliable &lt;strong&gt;host-to-host&lt;/strong&gt; protocol b
      
    
    </summary>
    
    
    
      <category term="tcp" scheme="http://stardustman.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>git-commands</title>
    <link href="http://stardustman.github.io/2019/05/20/git-commands/"/>
    <id>http://stardustman.github.io/2019/05/20/git-commands/</id>
    <published>2019-05-20T14:33:03.000Z</published>
    <updated>2019-05-22T06:56:15.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-rebase-i-HEAD-N"><a href="#git-rebase-i-HEAD-N" class="headerlink" title="git rebase -i HEAD~N"></a>git rebase -i HEAD~N</h1><blockquote><p>复制提交记录</p></blockquote><h1 id="git-branch-f-target-branch-name-commit-id"><a href="#git-branch-f-target-branch-name-commit-id" class="headerlink" title="git branch -f target-branch-name commit-id"></a>git branch -f target-branch-name commit-id</h1><blockquote><p>切换到 target-branch-name 并指向 commit-id</p></blockquote><h1 id="git-cherry-pick-commit-id1-commit-id2"><a href="#git-cherry-pick-commit-id1-commit-id2" class="headerlink" title="git cherry-pick commit-id1 commit-id2"></a>git cherry-pick commit-id1 commit-id2</h1><blockquote><p>重新排序提交的记录. cherry-pick 名字起得真是有意思啊. 像捡樱桃似的, 把一个个想要的记录捡到当前分支的后面.</p></blockquote><h1 id="git-checkout-b-branch-name"><a href="#git-checkout-b-branch-name" class="headerlink" title="git checkout -b branch-name"></a>git checkout -b branch-name</h1><blockquote><p>创建一个新分支, 并切换到新建的分支</p></blockquote><h1 id="git-merge-target-branch-name"><a href="#git-merge-target-branch-name" class="headerlink" title="git merge target-branch-name"></a>git merge target-branch-name</h1><blockquote><p>合并 target-branch-name 到当前分支. 结果是创建一个新的提交记录.</p></blockquote><h1 id="git-checkout-target-commit-id"><a href="#git-checkout-target-commit-id" class="headerlink" title="git checkout target-commit-id"></a>git checkout target-commit-id</h1><blockquote><p>detach HEAD, let <em>HEAD</em> point to target-commit-id.</p></blockquote><h1 id="git-tag-tag-name-target-commit-id"><a href="#git-tag-tag-name-target-commit-id" class="headerlink" title="git tag tag-name target-commit-id"></a>git tag tag-name target-commit-id</h1><blockquote><p>在 target-commit-id 处, 打上 tag-name 标签.</p></blockquote><p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">learning git branch</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-rebase-i-HEAD-N&quot;&gt;&lt;a href=&quot;#git-rebase-i-HEAD-N&quot; class=&quot;headerlink&quot; title=&quot;git rebase -i HEAD~N&quot;&gt;&lt;/a&gt;git rebase -i HEAD~N&lt;/h1&gt;&lt;bl
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://stardustman.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>katacoda-optimising-dockerfile-with-onbuild</title>
    <link href="http://stardustman.github.io/2019/05/20/katacoda-optimising-dockerfile-with-onbuild/"/>
    <id>http://stardustman.github.io/2019/05/20/katacoda-optimising-dockerfile-with-onbuild/</id>
    <published>2019-05-20T08:08:52.000Z</published>
    <updated>2019-05-20T08:08:52.717Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>csapp-memory-hierarchy</title>
    <link href="http://stardustman.github.io/2019/05/20/csapp-memory-hierarchy/"/>
    <id>http://stardustman.github.io/2019/05/20/csapp-memory-hierarchy/</id>
    <published>2019-05-20T06:22:49.000Z</published>
    <updated>2019-07-20T04:37:53.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Disk-Controller"><a href="#Disk-Controller" class="headerlink" title="Disk Controller"></a>Disk Controller</h1><blockquote><p>我们知道定位一个磁盘空间需要三个参数(platter, track, sector). 但是 cpu 不使用这么麻烦的方式, cpu 使用的是逻辑盘号. 也就是磁盘控制器将逻辑盘号翻译成 platter, track, sector. 磁盘控制器充当一个中间层. 也就是只关心逻辑盘号, 不关心具体的(platter, track, sector).<br>通过逻辑盘号将三维的(platter, track, sector) 转换为一维数组, 这就是抽象的意义啊. 这就是降维思维嘛.</p></blockquote><h1 id="Memory-Hierarchy"><a href="#Memory-Hierarchy" class="headerlink" title="Memory Hierarchy"></a>Memory Hierarchy</h1><blockquote><p>我们知道不同类型的存储, 每一个 bit 的价格不一样, 元件不同, 速度也不同. 世上事情大抵如此,不会集所有优点于一身.<br>利用程序的局部性, 构造一个层次存储系统, 每一层的存储当做下一层的缓存,(也就是下一层的一部分)这才会有 hit 和 miss 的根本原因啊! 这才会引出缓存的 placement policy 和 replacement policy. 缓存这种思想和普遍, 做开发时 redis 作为数据库的缓存, 也是解决速度不匹配的问题. </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Disk-Controller&quot;&gt;&lt;a href=&quot;#Disk-Controller&quot; class=&quot;headerlink&quot; title=&quot;Disk Controller&quot;&gt;&lt;/a&gt;Disk Controller&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们知道定
      
    
    </summary>
    
    
    
      <category term="csapp" scheme="http://stardustman.github.io/tags/csapp/"/>
    
  </entry>
  
  <entry>
    <title>building-docker-image</title>
    <link href="http://stardustman.github.io/2019/05/16/katacoda-building-docker-image/"/>
    <id>http://stardustman.github.io/2019/05/16/katacoda-building-docker-image/</id>
    <published>2019-05-16T09:33:01.000Z</published>
    <updated>2019-05-22T06:55:50.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong><em>Docker images</em></strong> are built based on a Dockerfile. A Dockerfile defines <strong>all the steps</strong> required to create a Docker image with your application configured and ready to be run as a container. The image itself contains everything, from operating system to dependencies and configuration required to run your application.<br>Having everything within the image allows you to migrate images between different environments and be confident that if it works in one environment, then it will work in another.<br>The Dockerfile allows for images to be composable, enabling users to extend existing images instead of building from scratch. <em>By building on an existing image, you only need to define the steps to setup your application</em>. The base images can be basic operating system installations or configured systems which simply need some additional customisations.</p></blockquote><h1 id="Base-images"><a href="#Base-images" class="headerlink" title="Base images"></a>Base images</h1><blockquote><p>All Docker images start from a base image. A base image is the same images from the Docker Registry which are used to start containers. Along with the image name, we can also include the image tag to indicate which particular version we want, <em>by default, this is latest</em>.These base images are used as the foundation for your additional changes to run your application. For example, in this scenario, we require NGINX to be configured and running on the system before we can deploy our static HTML files. As such we want to use NGINX as our base image.<br>Dockerfile’s are simple text files with a command on each line. To define a base image we use the instruction <strong>FROM image-name:tag</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:1.11-alpine</span><br></pre></td></tr></table></figure><h1 id="Running-commands"><a href="#Running-commands" class="headerlink" title="Running commands"></a>Running commands</h1><blockquote><p>With the base image defined, we need to run various commands to configure our image. There are many commands to help with this, the main commands two are COPY and RUN.<br><strong><em>RUN</em></strong> command allows you to execute any command as you would at a command prompt, for example installing different application packages or running a build command. The results of the RUN are <strong>persisted</strong> to the image so it’s important not to leave any unnecessary or temporary files on the disk as these will be included in the image.<br><strong><em>COPY src dest</em></strong> allows you to copy files from the directory containing the Dockerfile to the container’s image. This is extremely useful for <strong>source code</strong> and assets that you want to be deployed inside your container<br><em>A new index.html file has been created for you which we want to serve from our container. On the next line after the <strong><em>FROM</em></strong> command, use the COPY command to copy index.html into a directory called <strong>/usr/share/nginx/</strong>html</em></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:1.11-alpine</span><br><span class="line">COPY index.html /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><h1 id="Exposing-ports"><a href="#Exposing-ports" class="headerlink" title="Exposing ports"></a>Exposing ports</h1><blockquote><p>With our files copied into our image and any dependencies downloaded, you need to define which port application needs to be accessible on.<br>Using the <strong><em>EXPOSE port</em></strong> command you tell Docker which ports should be open and can be bound too. You can define multiple ports on the single command, for example, EXPOSE 80 433 or EXPOSE 7000-8000</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:1.11-alpine</span><br><span class="line">COPY index.html /usr/share/nginx/html/index.html</span><br><span class="line"># web server to be accessible via port 80</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><h1 id="Default-commands"><a href="#Default-commands" class="headerlink" title="Default commands"></a>Default commands</h1><blockquote><p>With the Docker image configured and having defined which ports we want accessible, we now need to define the command that launches the application.<br><em>The <strong><em>CMD</em></strong> line in a Dockerfile defines the default command to run when a container is launched.</em> If the command requires arguments then it’s recommended to use an array, for example [“cmd”, “-a”, “arga value”, “-b”, “argb-value”], which will be combined together and the command<br><strong>*cmd -a “arga value” -b argb-value</strong> would be run.<br>An alternative approach to CMD is ENTRYPOINT. While a CMD can be overridden when the container starts, a ENTRYPOINT defines a command which can have arguments passed to it when the container launches.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:1.11-alpine</span><br><span class="line">COPY index.html /usr/share/nginx/html/index.html</span><br><span class="line"># web server to be accessible via port 80</span><br><span class="line">EXPOSE 80</span><br><span class="line"># The command to run NGINX is nginx -g daemon off;</span><br><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><h1 id="Building-containers"><a href="#Building-containers" class="headerlink" title="Building containers"></a>Building containers</h1><blockquote><p>After writing your Dockerfile you need to use <strong><em>docker build</em></strong> to turn it into an image. <em>The build command takes in a directory containing the Dockerfile, executes the steps and stores the image in your local Docker Engine.</em> If one fails because of an error then the build stops.<br>Using the docker build command to build the image. You can give the image a <strong><em>friendly name by using the -t name option.</em></strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-nginx-image:latest</span><br></pre></td></tr></table></figure><blockquote><p>Sending build context to Docker daemon  3.072kB<br>Step 1/5 : FROM nginx:1.11-alpine<br> —&gt; bedece1f06cc<br>Step 2/5 : COPY index.html /usr/share/nginx/html/index.html<br> —&gt; Using cache<br> —&gt; 2be98924804a<br>Step 3/5 : EXPOSE 80<br> —&gt; Using cache<br> —&gt; 233ea4308326<br>Step 4/5 : CMD [“nginx”, “-g”, “daemon off;”]<br> —&gt; Using cache<br> —&gt; 1a518260bb2b<br>Step 5/5 : CMD [“nginx”, “-g”, “daemon off;”]<br> —&gt; Using cache<br> —&gt; 563c68c52ed7<br>Successfully built 563c68c52ed7<br>Successfully tagged my-nginx-image:latest</p></blockquote><h1 id="Launching-new-image"><a href="#Launching-new-image" class="headerlink" title="Launching new image"></a>Launching new image</h1><blockquote><p>NGINX is designed to run as a background service so you should include the option -d. To make the web server accessible, bind it to port 80 using p 80:80</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 my-nginx-image:latest</span><br></pre></td></tr></table></figure><blockquote><p>access the launched web server via the hostname docker. the command <strong><em>curl -i <a href="http://docker" target="_blank" rel="noopener">http://docker</a></em></strong> will return our index file via NGINX and the image we built.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i http://docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Docker images&lt;/em&gt;&lt;/strong&gt; are built based on a Dockerfile. A Dockerfile defines &lt;strong&gt;all the steps&lt;/strong&gt;
      
    
    </summary>
    
    
    
      <category term="docker" scheme="http://stardustman.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
